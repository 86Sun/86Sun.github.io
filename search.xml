<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>初探对偶图</title>
      <link href="/2018/10/09/%E5%AF%B9%E5%81%B6%E5%9B%BE/"/>
      <url>/2018/10/09/%E5%AF%B9%E5%81%B6%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>平面图与对偶图及其在最大流最小割方面的简单应用</p><a id="more"></a><p>欧拉公式：</p><pre><code>对于一张n个点，m条边的平面图，面数f=m-n+2</code></pre><p>平面图：</p><pre><code>所有边只在顶点处相交</code></pre><p>对偶图：</p><pre><code>对任一平面图，都存在其对偶图，平面图中每一个面对应其对偶图中的点记原平面图为G，其对偶图为G* ， G*的边有两种情况，回边和非回边，任一边与G中的边有交点</code></pre><p>所以这东西有什么用？</p><p>可以用来求最小割（最大流）！</p><p>对偶图G<em> 中的一条路对应原图G中的一个割 ， 所以求G</em> 中的最短路就相当于求了G 中的最小割</p><p>求最大流只会一个FF算法。。。复杂度并不会分析</p><p>这样转化之后至少出现了方便分析复杂度(对我来说。。。)的算法–最短路</p><p>所以求平面图最小割就可以建对偶图后跑一边最短路</p><p>例题：</p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1001" target="_blank" rel="noopener">bzoj 1001: [BeiJing2006]狼抓兔子</a></p><p>f <em> 之间边的权值就是之前原来的点 f 之间与f </em> 的边交叉的边的权值。 </p><p>一开始以为是裸的最小割。。。然而这样稠密的图好像并不能过orz</p><p><del>代码</del></p><h6>不存在的</h6><hr><h2>总结</h2><p>图论真的神奇啊orz</p><p>虽然了解了对偶图和它最短路求最小割这一应用，但是感觉理解并不透彻。。。并不会证明。。。</p><p>网络流还需要进一步学习</p><p>最后还是先保全noip 2018成绩吧。。。毕竟高三了，之前并没参加过比赛，也就只能先争取1=敲开自招大门了。。。大学再战</p><hr><h2>参考文章</h2><ul><li><a herf="https://www.cnblogs.com/abclzr/p/5033461.html">【BZOJ 1001】狼抓兔子 对偶图+SPFA</a></li><li><a herf="https://blog.csdn.net/MaxMercer/article/details/77976666">关于平面图到对偶图的转化</a></li><li><a herf="http://blog.sina.com.cn/s/blog_60707c0f01011fnn.html">对偶图的应用</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小割 </tag>
            
            <tag> 对偶图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SCOI2005-互不侵犯-状压dp入门</title>
      <link href="/2018/10/09/%5BSCOI2005%5D%E4%BA%92%E4%B8%8D%E4%BE%B5%E7%8A%AF-%E7%8A%B6%E5%8E%8Bdp%E5%85%A5%E9%97%A8/"/>
      <url>/2018/10/09/%5BSCOI2005%5D%E4%BA%92%E4%B8%8D%E4%BE%B5%E7%8A%AF-%E7%8A%B6%E5%8E%8Bdp%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>状压dp入门题目</p><a id="more"></a><h2>题目描述</h2><br><p>在N×N的棋盘里面放K个国王，使他们互不攻击，共有多少种摆放方案。国王能攻击到它上下左右，以及左上左下右上右下八个方向上附近的各一个格子，共8个格子。</p><br><p>注：数据有加强（2018/4/25）</p><br><h2>输入输出格式</h2><p><strong>输入格式：</strong><br></p><p></p><p></p><p>只有一行，包含两个数N，K （ 1 &lt;=N &lt;=9, 0 &lt;= K &lt;= N * N）</p><p></p><br><strong>输出格式：</strong><br><p></p><p></p><p></p><p>所得的方案数</p><p></p><p></p><p></p><h2>输入输出样例</h2><p></p><p><div class="am-g"></div></p><p><div class="am-u-md-6 copy-region"><br><strong>输入样例#1：</strong><br><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a></div></p><pre>3 2</pre><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>16</pre><hr><h1>sol</h1><p>状压dp的经典入门题目</p><p>状态有三维（其实也可以滚动数组一下，不过我lazy了orz）</p><p>一维表示列，一维表示已经放置的king数，一维表示上一列king的位置（二进制表示，也就是状压dp的核心内容？）</p><p>然后转移枚举上一列的状态，judge一下然后转移就行了</p><p>没开long long居然调了10分钟orz，是真的烦人</p><p>复杂度O(nk2^{2n})，算出来好像1e9多，居然能过orz，还以为要加什么玄学优化来的</p><hr><h1>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> dp[<span class="number">10</span>][<span class="number">82</span>][<span class="number">512</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> maxx;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> zt)</span><span class="comment">//judge if there is two kings that can attack each other</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp&lt;=maxx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((temp&amp;zt)==temp)</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> zt)</span><span class="comment">//count 1 in zt</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(zt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(zt&amp;<span class="number">1</span>)</span><br><span class="line">         ++ans;</span><br><span class="line">        zt&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line">    maxx=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">9</span>)<span class="comment">//lie</span></span><br><span class="line">     rep(w,<span class="number">0</span>,k)<span class="comment">//tot num of kings</span></span><br><span class="line">      rep(j,<span class="number">0</span>,maxx)<span class="comment">//condition of this lie</span></span><br><span class="line">       rep(t,<span class="number">0</span>,maxx)<span class="comment">//condition of last lie</span></span><br><span class="line">        <span class="keyword">if</span>(judge(j|t)&amp;&amp;(!(j&amp;t))&amp;&amp;(w-count(j)&gt;=<span class="number">0</span>))</span><br><span class="line">         dp[i][w][j]+=dp[i<span class="number">-1</span>][w-count(j)][t];</span><br><span class="line">    rep(i,<span class="number">0</span>,maxx)</span><br><span class="line">     ans+=dp[n][k][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>题外话</h1><p>其实状压dp也不一定用二进制</p><p>在qbxt做过一个，我用的三进制，虽然不是正解，但是可以A</p><p>而且状压dp也可以用矩阵加速一波</p></div>]]></content>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OI做题记录</title>
      <link href="/2018/10/09/OI%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/10/09/OI%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>不定期更新（咕咕咕）</p><a id="more"></a><p>CF492C Vanya and Exams   贪心</p><p>[SCOI2005]互不侵犯  状压dp</p><p>Hanoi双塔问题  高精+递推</p><p>luogu P1439 【模板】最长公共子序列   LIS(n log n)+离散化</p><p>奶酪  并查集</p><p>luogu P1784 数独  搜索</p><p>bzoj 3251: 树上三角形 暴力+找规律</p>]]></content>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIp提高模拟赛1</title>
      <link href="/2018/09/09/NOIp%E6%8F%90%E9%AB%98%E6%A8%A1%E6%8B%9F%E8%B5%9B1/"/>
      <url>/2018/09/09/NOIp%E6%8F%90%E9%AB%98%E6%A8%A1%E6%8B%9F%E8%B5%9B1/</url>
      <content type="html"><![CDATA[<h2>A</h2><h2 class="subject-item-title">题目描述<br><a href="javascript:void(0);" class="icon-fullscreen js-full-question" title="全屏查看题目" target="_blank" rel="noopener"></a><br><a href="javascript:void(0);" class="icon-resize-small js-small-question" style="display:none;" title="收起全屏，编写代码" target="_blank" rel="noopener"></a><br></h2><br><div class="subject-describe"><br><div style="margin-bottom:10px;"><div>  小N得到了一个非常神奇的序列A。<a id="more"></a>这个序列长度为N，下标从1开始。A的一个子区间对应一个序列，可以由数对[l,r]表示，代表A[l], A[l + 1], …, A[r]这段数。对于一个序列B[1], B[2], …, B[k]，定义B的中位数如下： </div> <div>  1. 先对B排序。得到新的序列C。 </div> <div>  2. 假如k是奇数，那么中位数为<img src="https://uploadfiles.nowcoder.com/files/20180827/306603_1535370498644_equation?tex=C%5B%5Cfrac%7Bk%2B1%7D%7B2%7D%5D">。假如k为偶数，中位数为<img src="https://uploadfiles.nowcoder.com/files/20180827/306603_1535370528061_equation?tex=C%5B%5Cfrac%7Bk%7D%7B2%7D%5D">。 </div> <div>  对于A的所有的子区间，小N可以知道它们对应的中位数。现在小N想知道，所有长度&gt;=Len的子区间中，中位数最大可以是多少。 </div></div><br><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输入描述:</h2><br><pre>第一行输入两个数N,Len。<br>第二行输入序列A，第i个数代表A[i]。</pre><br><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输出描述:</h2><br><pre>一行一个整数，代表所有长度&gt;=Len的子区间中，最大的中位数。</pre><br><!-- <br/><h5 style="font-size:14px;font-weight:bold;">输入例子:</h5><pre>11 34864 8684 9511 8557 1122 1234 953 9819 101 1137 1759 </pre><br/><h5 style="font-size:14px;font-weight:bold;">输出例子:</h5><pre>8684</pre> --><br><div class="question-oi"><br><div class="question-oi-hd"><br>示例1<br></div><br><div class="question-oi-bd"><br><div class="question-oi-mod"><br><h2>输入</h2><br><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="11 34864 8684 9511 8557 1122 1234 953 9819 101 1137 1759 " target="_blank" rel="noopener">复制</a><br><div class="question-oi-cont"><br><pre>11 3<br>4864 8684 9511 8557 1122 1234 953 9819 101 1137 1759 </pre><br></div><br></div><br><div class="question-oi-mod"><br><h2>输出</h2><br><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="8684" target="_blank" rel="noopener">复制</a><br><div class="question-oi-cont"><br><pre>8684</pre><br></div><br></div><br></div><br></div><br><h2 style="font-size:14px;font-weight:bold;color:#34495e;">备注:</h2><br><pre>数据范围：<br>30%: n &lt;= 200<br>60%: n &lt;= 2000<br>另外有20%：不超过50个不同的数<br>100%：1&lt;=Len&lt;=n&lt;=10^5, 1 &lt;= a[i] &lt;= 10^9</pre><br></div><br><br><br>—<br><br>考试的时候想到了一个错误的做法，只考虑len==Len的情况，然后找中位数最大值<br><br>主要是得出了错误的结论：一个较大数据在一个较大区间内的位置不会比在一个较小区间里的位置更居中。<br><br>但是这个结论我不会证伪<br><br>然后就这样，然后主席树求区间k/2或(k+1)/2小值，50分<br><br>那么下面来说一下正解<br><br>—<br><br>让中位数最大，可以二分答案<br><br>那么怎么验证答案是否可行？<br><br>比如说我们二分到的为x，那么我们就让序列中&gt;=x的数=1，＜x的数=-1<br><br>这样对于一段序列，<br><br>当且仅当当前序列的和大于0时，这段序列的中位数才大于等于x<br><br>其实这个就可以成为一个区间长度&gt;=len的最大子段和<br><br>然后复杂度就是O(n log max{a_i})<br><br>显然可以过<br><br>Code<br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mn,ans,n,a[MAXN],b[MAXN],len;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mn=<span class="number">2147483647</span>;</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=x)</span><br><span class="line">         b[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">         b[i]=<span class="number">-1</span>;</span><br><span class="line">        b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=len)</span><br><span class="line">        &#123;</span><br><span class="line">            mn=min(mn,b[i-len]);</span><br><span class="line">            <span class="keyword">if</span>(b[i]-mn&gt;<span class="number">0</span>)</span><br><span class="line">             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid,l=<span class="number">2147483647</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;len);</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        l=min(l,a[i]);r=max(r,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=((l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(judge(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">            ans=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">         r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h2>B</h2><h2>C</h2><h2>总结</h2><p>A题提供了一个以前没见过的中位数思路，最大子段和。。。</p>]]></content>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIp pj模拟赛1</title>
      <link href="/2018/09/09/NOIp%E6%99%AE%E5%8F%8A%E6%A8%A1%E6%8B%9F%E8%B5%9B1/"/>
      <url>/2018/09/09/NOIp%E6%99%AE%E5%8F%8A%E6%A8%A1%E6%8B%9F%E8%B5%9B1/</url>
      <content type="html"><![CDATA[<h2>A</h2><div style="margin-bottom:10px;"><div>  小A刚考完大学考试。现在已经出了n门课的成绩，他想自己先算一下这些课的绩点是多少。设第i门课的他拿到的绩点是gpa<sub>i</sub>,而这门课的学分是sc<sub>i</sub>，那么他的总绩点用下面的公式计算： </div> <div>  <img src="https://uploadfiles.nowcoder.com/files/20180902/306603_1535894110324_equation?tex=%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5En%20gpa_i%5Ctimes%20sc_i%7D%7B%5Csum_%7Bi%3D1%7D%5En%20sc_i%7D">,<br> </div> <div>  换言之，设S为<span>sc</span><sub>i</sub>的和，T为gpa<sub>i</sub>与sc<sub>i</sub>的乘积的和。那么小A的绩点就是T除以S的值。 </div></div><a id="more"></a><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输入描述:</h2><pre><div>第一行一个整数n。</div><div>接下来n行，每行两个数gpa<sub>i</sub>和sc<sub>i。</sub></div></pre><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输出描述:</h2><pre>输出一行一个实数，表示小A的绩点。输出四舍五入保留1位小数。</pre><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n,m,t,mx,my,q;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sx,sy;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">while</span>(c!=<span class="string">' '</span>&amp;&amp;c!=<span class="string">'\n'</span>&amp;&amp;c!=<span class="string">'\r'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'U'</span>)</span><br><span class="line">            mx+=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'L'</span>)</span><br><span class="line">            my+=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'R'</span>)</span><br><span class="line">            my+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mx+=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    mx=((mx%n)*(t%n))%n;</span><br><span class="line">    my=((my%m)*(t%m))%m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line">    For(i,<span class="number">1</span>,q)</span><br><span class="line">    &#123;</span><br><span class="line">        sx=read();sy=read();</span><br><span class="line">        sx=(sx+mx)%n;</span><br><span class="line">        sy=(sy+my)%m;</span><br><span class="line">        <span class="keyword">if</span>(sx&lt;=<span class="number">0</span>)sx+=n;</span><br><span class="line">        <span class="keyword">if</span>(sy&lt;=<span class="number">0</span>)sy+=m;</span><br><span class="line">        <span class="comment">//if(!sx)sx=n;</span></span><br><span class="line">        <span class="comment">//if(!sy)sy=m;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,sx,sy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>B</h2><p><div style="margin-bottom:10px;"><div>  小A站在一个巨大的棋盘上。这个棋盘可以看成是一个网格图。这个网格图的大小为n<em>m。左上角坐标为(1,1)，右下角坐标为(n,m)。这个棋盘很特别，他每行每列都是一个环。具体来说，当小A站在第一行，他往上走的时候，他会走到第n行，站在第n行往下走会走到第一行。对于第一列和第m列类似。小A在棋盘上可以上下左右走，假设他站在位置(i,j)，向上走，会走到(i-1,j)，向下回到(i+1,j)，向左到(i,j-1)，向右到(i,j+1)。注意由于棋盘是循环的，他不会走出这个棋盘。 </em></div> <div>  现在小A有一个固定的行走序列S，代表他每一步走的方向，U代表向上，D代表向下，L代表向左，R代表向右。比如小A一开始在(1,1)，棋盘大小为34。行走序列为UULRD。那么他会依次经过(3,1),(2,1),(2,4),(2,1),(3,1)。但小A觉得只走一遍S太无聊，因此他会重复走这个序列T次。比如上面的例子，当T=2时，真正的行走序列为UULRDUULRD。 </div> <div>  小A有q个备选的起点位置。他一开始先给定你棋盘大小与行走序列，对于每个起点位置，他想知道，他沿着序列走，最终会走到哪个位置停下。 </div></div></p><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输入描述:</h2><br><pre>第一行三个整数n,m,T。<br>接下来一行一个字符串S，代表行走序列。注意行走序列在真实走的时候要重复T次。<br>接下来一个整数q。<br>接下来q行，每行两个整数x,y，代表小A的一个备选起点。</pre><br><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输出描述:</h2><br><pre>输出q行，每行两个整数，输出对于这个起点，最后的终点是哪里。</pre><br><br><div class="question-oi"><br><div class="question-oi-hd"><br>示例1<br></div><br><div class="question-oi-bd"><br><div class="question-oi-mod"><br><h2>输入</h2><br><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="3 6 4DUUUDLLLLR33 22 51 4" target="_blank" rel="noopener">复制</a><br><div class="question-oi-cont"><br><pre>3 6 4<br>DUUUDLLLLR<br>3<br>3 2<br>2 5<br>1 4<br></pre><br></div><br></div><br><div class="question-oi-mod"><br><h2>输出</h2><br><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="2 21 53 4" target="_blank" rel="noopener">复制</a><br><div class="question-oi-cont"><br><pre>2 2<br>1 5<br>3 4<br></pre><br></div><br></div><br></div><br></div><br><h2 style="font-size:14px;font-weight:bold;color:#34495e;">备注:</h2><br><pre>20%: |S| <em> T &lt;= 10^6, q = 1<br>40%: |S| </em> T &lt;= 10^6, q &lt;= 10^5<br>60%: |S|, T &lt;= 10^5, q &lt;= 10^5<br>100%: 1 &lt;= T,n,m &lt;= 10^9, 1 &lt;= x &lt;= n, 1 &lt;= y &lt;= m. 1&lt;= q, |S| &lt;= 10^5<br>其中|S|代表S的长度。</pre><br>—<br><br>逐个字符读入，然后把所有操作加起来$<em>t %n$和$</em>t %m$<br><br>然后再对每个坐标加上操作%n %m<br><br>然后特判一下非正数处理即可<br><br>$$O(|S|+q)$$<br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n,m,t,mx,my,q;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sx,sy;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">while</span>(c!=<span class="string">' '</span>&amp;&amp;c!=<span class="string">'\n'</span>&amp;&amp;c!=<span class="string">'\r'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'U'</span>)</span><br><span class="line">            mx+=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'L'</span>)</span><br><span class="line">            my+=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'R'</span>)</span><br><span class="line">            my+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mx+=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    mx=((mx%n)*(t%n))%n;</span><br><span class="line">    my=((my%m)*(t%m))%m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line">    For(i,<span class="number">1</span>,q)</span><br><span class="line">    &#123;</span><br><span class="line">        sx=read();sy=read();</span><br><span class="line">        sx=(sx+mx)%n;</span><br><span class="line">        sy=(sy+my)%m;</span><br><span class="line">        <span class="keyword">if</span>(sx&lt;=<span class="number">0</span>)sx+=n;</span><br><span class="line">        <span class="keyword">if</span>(sy&lt;=<span class="number">0</span>)sy+=m;</span><br><span class="line">        <span class="comment">//if(!sx)sx=n;</span></span><br><span class="line">        <span class="comment">//if(!sy)sy=m;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,sx,sy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h2>C</h2><p><div class="subject-describe"></div></p><p><div style="margin-bottom:10px;"><div>  小A有一个只包含左右括号的字符串S。但他觉得这个字符串不够美观，因为它不是一个合法的括号串。一个合法的括号串是这样定义的： </div> <div>  1. ()是合法的括号串 </div> <div>  2. 若A是合法的括号串，则(A)则是合法的括号串 </div> <div>  3. 若A，B是合法的括号串，则AB也是合法的括号串。 </div> <div>  <br> </div> <div>  小A现在希望删掉S中若干个字符，使得剩下的字符串是一个合法的括号串。小A想知道有多少不同的方案。两个方案是不同的，当且仅当他们删除的位置不同。比如当S是(()时，有两种方案。分别是删掉第一个位置，或是删掉第二个位置。 </div></div></p><p></p><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输入描述:</h2><p></p><p><pre>第一行一个整数n，代表S的长度。<br>第二行输入n个字符，字符要么是(，要么是)。代表串S。</pre></p><p></p><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输出描述:</h2><p></p><p><pre>一行一个整数，代表不同的方案数。答案对10^9+7取模。</pre><br>&lt;!– <br></p><p></p><h5 style="font-size:14px;font-weight:bold;">输入例子:</h5><p></p><p><pre>8<br>)(()(())</pre><br><br></p><p></p><h5 style="font-size:14px;font-weight:bold;">输出例子:</h5><p></p><p><pre>30<br></pre><br> –&gt;</p><p><div class="question-oi"></div></p><p><div class="question-oi-hd"><br>示例1<br></div></p><p><div class="question-oi-bd"></div></p><p><div class="question-oi-mod"></div></p><p></p><h2>输入</h2><br><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="8)(()(())" target="_blank" rel="noopener">复制</a><p></p><p><div class="question-oi-cont"></div></p><p><pre>8<br>)(()(())</pre><br><br></p><p><div class="question-oi-mod"></div></p><p></p><h2>输出</h2><br><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="30" target="_blank" rel="noopener">复制</a><p></p><p><div class="question-oi-cont"></div></p><p><pre>30<br></pre><br><br><br></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>看得出来是dp题推不出式子。。。前两个题做半小时这个题做三小时都没做出来。。。最后连暴力都没打上。。。</p><p>我们首先考虑爆搜，枚举每一位上括号是否被删去，然后对于每一次搜索到的结果judge一下，具体就是用栈来搞，这样的时间复杂度显然是$O(2^n * n)$的，显然过不了</p><p>那我们再来看之后用栈验证的过程，可以注意到和当前剩下的未匹配的左括号数有密切关系（爆搜验证的时候就是如果是左括号就++a，如果是右括号就–a，如果最后是0那就说明合法），那我们状态中就可以有一个量来描述这个东西</p><p>我们用$f_{i,j}$来表示考虑第i位有j个未匹配的左括号的方案数，那么</p><p>如果s[i]是左括号，那么f[i]<!--???-->[j+1]=sigma f[0~i-1]<!--???-->[j]</p><p>如果是右括号，那么f[i]<!--???-->[j-1]=sigma f[0~i-1]<!--???-->[j]</p><p>最后的答案是(sigma f[1~i]<!--???-->[j-1] ) -1，不太清楚为什么要-1 。。。</p><p>然后显然就可以用前缀和来优化，前缀和优化之后就只用得到当前i的前一项，可以用一个滚动数组交替滚动</p><p>先给出不加滚动数组的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f[<span class="number">10010</span>][<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">        a[i]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        For(j,<span class="number">0</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(a[i]==<span class="string">'('</span>&amp;&amp;j)f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][j<span class="number">-1</span>])%p;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==<span class="string">')'</span>&amp;&amp;j&lt;n)f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][j+<span class="number">1</span>])%p;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;f[i][j]&lt;&lt;'\n';</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(f[n][<span class="number">0</span>]<span class="number">-1</span>+p)%p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>稍微改动一下即为AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f[<span class="number">2</span>][<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> w=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">For(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">a[i]=c;</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">For(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">For(j,<span class="number">0</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">f[w^<span class="number">1</span>][j]=f[w][j];</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'('</span>&amp;&amp;j)f[w^<span class="number">1</span>][j]=(f[w^<span class="number">1</span>][j]+f[w][j<span class="number">-1</span>])%p;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">')'</span>&amp;&amp;j&lt;n)f[w^<span class="number">1</span>][j]=(f[w^<span class="number">1</span>][j]+f[w][j+<span class="number">1</span>])%p;</span><br><span class="line">&#125;</span><br><span class="line">w^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(f[w][<span class="number">0</span>]<span class="number">-1</span>+p)%p;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>主席树入门：静态主席树</title>
      <link href="/2018/08/30/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8%EF%BC%9A%E9%9D%99%E6%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
      <url>/2018/08/30/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8%EF%BC%9A%E9%9D%99%E6%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
      <content type="html"><![CDATA[<h2>问题</h2><p>首先用一个问题来引入：</p><p>给出n个数，m次查询，每次查询一个区间[l,r]中第k大的值</p><a id="more"></a><h2>sol</h2><p>显然可以有一个O(nm)的暴力</p><p>那么我们考虑用线段树来做这道题</p><p>用裸的权值线段树可以支持询问数列中的第k大值，我们询问[l,r]中第k大的值，其实可以调用插入第l个数之前的权值线段树和插入第r个数之后的权值线段树，用它们的权值做差，其实就是一颗[l,r]的权值线段树</p><p>很容易想到可以构建n颗权值线段树，不过空间肯定会炸</p><p>那么我们考虑只更新那些有插入的点，没有更新到的点直接用上个版本的点来代替，这样每次插入一个数的新增空间是log n</p><p>这里就不能用之前普通的线段树那种左儿子(x&lt;&lt;1)右儿子((x&lt;&lt;1)|1)的方式来存储了</p><p>当然，一般还要把这些数离散化一下，如果数的范围小也可以不用离散化</p><p>我们就预先开好一个内存池一样的东西，新开点时直接从这里取就好了，new好像比较慢</p><p><a href="https://www.luogu.org/problemnew/show/P3834" target="_blank" rel="noopener">模板题</a>&gt;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN (200010)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> c;</span><br><span class="line">     <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">     <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">     &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ls[MAXN&lt;&lt;<span class="number">5</span>],rs[MAXN&lt;&lt;<span class="number">5</span>],sum[MAXN&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> root[MAXN],cnt;<span class="comment">//第i个版本的根节点，节点数</span></span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXN],hash[MAXN],len,ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHash</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span><span class="comment">//离散化检索</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(hash+<span class="number">1</span>,hash+len+<span class="number">1</span>,x)-hash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">    ls[x]=++cnt;</span><br><span class="line">    build(l,mid,cnt);</span><br><span class="line">    rs[x]=++cnt;</span><br><span class="line">    build(mid+<span class="number">1</span>,r,cnt);</span><br><span class="line">    <span class="comment">//printf("[l:%d r:%d x:%d ls:%d rs:%d]\n",l,r,x,ls[x],rs[x]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> his)</span><span class="comment">//要修改的值 左端 右端 要修改的点 要修改的点的前一个版本 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;sum[x]=sum[his]+<span class="number">1</span>;<span class="keyword">return</span>;&#125;<span class="comment">//AAAA</span></span><br><span class="line">    ls[x]=ls[his];rs[x]=rs[his];sum[x]=sum[his]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(w&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        ls[x]=++cnt;</span><br><span class="line">        update(w,l,mid,cnt,ls[his]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rs[x]=++cnt;</span><br><span class="line">        update(w,mid+<span class="number">1</span>,r,cnt,rs[his]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sum[x]=sum[ls[x]]+sum[rs[x]];</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rx,<span class="keyword">int</span> lx,<span class="keyword">int</span> k)</span><span class="comment">//当前点左 当前点右 当前右点 当前左点 第k小 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=hash[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=sum[ls[rx]]-sum[ls[lx]])<span class="comment">//在左边 </span></span><br><span class="line">     ask(l,mid,ls[rx],ls[lx],k);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//在右边 </span></span><br><span class="line">     ask(mid+<span class="number">1</span>,r,rs[rx],rs[lx],k-sum[ls[rx]]+sum[ls[lx]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tk;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">     a[i]=read();</span><br><span class="line">    <span class="built_in">memcpy</span>(hash,a,<span class="keyword">sizeof</span> a);</span><br><span class="line">    sort(hash+<span class="number">1</span>,hash+n+<span class="number">1</span>);</span><br><span class="line">    len=unique(hash+<span class="number">1</span>,hash+n+<span class="number">1</span>)-hash<span class="number">-1</span>;</span><br><span class="line">    root[<span class="number">0</span>]=++cnt;</span><br><span class="line">    build(<span class="number">1</span>,len,cnt);</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        root[i]=++cnt;</span><br><span class="line">        update(getHash(a[i]),<span class="number">1</span>,len,cnt,root[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    For(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tk=read();</span><br><span class="line">        <span class="keyword">if</span>(tx==ty)</span><br><span class="line">        &#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[tx]);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        ask(<span class="number">1</span>,len,root[ty],root[tx<span class="number">-1</span>],tk);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客迁移</title>
      <link href="/2018/08/30/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2018/08/30/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<p>其他博客地址：</p><p>csdn：<a href="https://blog.csdn.net/suxuyu01" target="_blank" rel="noopener">https://blog.csdn.net/suxuyu01</a></p><p>Luogu：<a href="https://www.luogu.org/blog/lqyzsun/" target="_blank" rel="noopener">https://www.luogu.org/blog/lqyzsun/</a></p><p>一般情况下不会再使用，如果在除此博客之外的地方发了我认为有价值的新文章也搬到这里来</p>]]></content>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
