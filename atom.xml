<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒟蒻sxy的blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sxyoi.cn/"/>
  <updated>2018-10-27T16:23:24.914Z</updated>
  <id>http://www.sxyoi.cn/</id>
  
  <author>
    <name>sxy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>请柬/邮递员送信（反图spfa）</title>
    <link href="http://www.sxyoi.cn/2018/10/28/%E8%AF%B7%E6%9F%AC%EF%BC%8C%E9%82%AE%E9%80%92%E5%91%98%E9%80%81%E4%BF%A1/"/>
    <id>http://www.sxyoi.cn/2018/10/28/请柬，邮递员送信/</id>
    <published>2018-10-27T16:18:00.000Z</published>
    <updated>2018-10-27T16:23:24.914Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1342" target="_blank" rel="noopener">请柬</a></p><p><a href="https://www.luogu.org/problemnew/show/P1629" target="_blank" rel="noopener">邮递员送信</a></p><a id="more"></a><h2>sol</h2><p>这两道题好像基本上是完全一样的啊。。。不知道为什么一道黄一道蓝。。。</p><p>如果是无向图要来回时间直接*2</p><p>有向图的话，显然的做法是从每个点跑一遍spfa找到起点的最短路。。。但是显然过不了</p><p>其实上面等价于在反图上跑一遍spfa</p><p>所以我们正图跑一边spfa，反图跑一边spfa，这样正图上的是1点到其他点的最短路，反图上是其他点到1点的最短路，不得不说图论真的是神奇。。。</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邮递员送信</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">100010</span>],ve[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">1001</span>],vlast[<span class="number">1001</span>],cnt,vcnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis[<span class="number">1001</span>],vdis[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vadd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ve[++vcnt].next=vlast[from];</span><br><span class="line">    vlast[from]=vcnt;</span><br><span class="line">    ve[vcnt].to=to;</span><br><span class="line">    ve[vcnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    rep(i,<span class="number">2</span>,n)</span><br><span class="line">     dis[i]=<span class="number">-1</span>;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        temp=last[q.front()];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[e[temp].to]&lt;<span class="number">0</span>||dis[e[temp].to]&gt;dis[q.front()]+e[temp].v)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[temp].to]=dis[q.front()]+e[temp].v;</span><br><span class="line">                <span class="keyword">if</span>(!vis[e[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[e[temp].to]=<span class="number">1</span>;</span><br><span class="line">                    q.push(e[temp].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=e[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[q.front()]=<span class="number">0</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vspfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    rep(i,<span class="number">2</span>,n)</span><br><span class="line">     vdis[i]=<span class="number">-1</span>;</span><br><span class="line">    vdis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        temp=vlast[q.front()];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vdis[ve[temp].to]&lt;<span class="number">0</span>||vdis[ve[temp].to]&gt;vdis[q.front()]+ve[temp].v)</span><br><span class="line">            &#123;</span><br><span class="line">                vdis[ve[temp].to]=vdis[q.front()]+ve[temp].v;</span><br><span class="line">                <span class="keyword">if</span>(!vis[ve[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[ve[temp].to]=<span class="number">1</span>;</span><br><span class="line">                    q.push(ve[temp].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=ve[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[q.front()]=<span class="number">0</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">        vadd(ty,tx,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa();</span><br><span class="line">    vspfa();</span><br><span class="line">    rep(i,<span class="number">2</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=(dis[i]+vdis[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请柬</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">1000010</span>],ve[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> vlast[<span class="number">1000001</span>],last[<span class="number">1000001</span>],cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis[<span class="number">1000001</span>],ans;</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">1000001</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">vadd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ve[cnt].next=vlast[from];</span><br><span class="line">    vlast[from]=cnt;</span><br><span class="line">    ve[cnt].to=to;</span><br><span class="line">    ve[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    rep(i,<span class="number">2</span>,n)</span><br><span class="line">     dis[i]=<span class="number">2147483647</span>;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    inq[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        temp=last[q.front()];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[e[temp].to]&gt;dis[q.front()]+e[temp].v)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[temp].to]=dis[q.front()]+e[temp].v;</span><br><span class="line">                <span class="keyword">if</span>(!inq[e[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(e[temp].to);</span><br><span class="line">                    inq[e[temp].to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=e[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        inq[q.front()]=<span class="number">0</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    rep(i,<span class="number">2</span>,n)</span><br><span class="line">     dis[i]=<span class="number">2147483647</span>;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    inq[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        temp=vlast[q.front()];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[ve[temp].to]&gt;dis[q.front()]+ve[temp].v)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[ve[temp].to]=dis[q.front()]+ve[temp].v;</span><br><span class="line">                <span class="keyword">if</span>(!inq[ve[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(ve[temp].to);</span><br><span class="line">                    inq[ve[temp].to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=ve[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        inq[q.front()]=<span class="number">0</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">        vadd(ty,tx,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa1();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[i]!=<span class="number">2147483647</span>)</span><br><span class="line">         ans+=dis[i];</span><br><span class="line">    &#125;</span><br><span class="line">    spfa2();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[i]!=<span class="number">2147483647</span>)</span><br><span class="line">         ans+=dis[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>总结</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1342&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;请柬&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1629&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;邮递员送信&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://www.sxyoi.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>跑路</title>
    <link href="http://www.sxyoi.cn/2018/10/28/%E8%B7%91%E8%B7%AF/"/>
    <id>http://www.sxyoi.cn/2018/10/28/跑路/</id>
    <published>2018-10-27T16:09:00.000Z</published>
    <updated>2018-10-27T16:16:38.657Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1613" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h2>sol</h2><p>这道题是最短路径和倍增思想的结合题。</p><p>观察到每条边长度均为1km，也就是2^0</p><p>再观察跑路器，每秒钟可以跑2^k千米</p><p>所以用倍增，如果u，v之间存在一条路径长度为2^k千米，那么可以转化为它们之间存在一条消耗时间为1的边</p><p>如果u，v之间存在一个点w， u，w之间存在一条路径长度为2<sup>k，w，v之间存在一条路径长度为2</sup>k，那么u，v之间存在一条长度为2^{k+1}的路径，当然也是消耗时间为1</p><p>按这个方法跑一边floyd来建图，然后再跑一遍Floyd找最短路径即可</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">70</span>][<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,dis[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx,ty;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();</span><br><span class="line">        dp[<span class="number">0</span>][tx][ty]=<span class="number">1</span>;</span><br><span class="line">        dis[tx][ty]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(w,<span class="number">1</span>,<span class="number">64</span>)</span><br><span class="line">     rep(k,<span class="number">1</span>,n)</span><br><span class="line">      rep(i,<span class="number">1</span>,n)</span><br><span class="line">       rep(j,<span class="number">1</span>,n)</span><br><span class="line">       &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dp[w][i][j])</span><br><span class="line">         dp[w][i][j]=(dp[w<span class="number">-1</span>][i][k]&amp;dp[w<span class="number">-1</span>][k][j]);</span><br><span class="line">        <span class="keyword">if</span>(dp[w][i][j])</span><br><span class="line">         dis[i][j]=<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    rep(k,<span class="number">1</span>,n)</span><br><span class="line">     rep(i,<span class="number">1</span>,n)</span><br><span class="line">      rep(j,<span class="number">1</span>,n)</span><br><span class="line">       dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dis[<span class="number">1</span>][n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>总结</h2><p>神奇的操作。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1613&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="最短路" scheme="http://www.sxyoi.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="倍增" scheme="http://www.sxyoi.cn/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="Floyd" scheme="http://www.sxyoi.cn/tags/Floyd/"/>
    
  </entry>
  
  <entry>
    <title>三角形牧场</title>
    <link href="http://www.sxyoi.cn/2018/10/28/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%89%A7%E5%9C%BA/"/>
    <id>http://www.sxyoi.cn/2018/10/28/三角形牧场/</id>
    <published>2018-10-27T16:03:00.000Z</published>
    <updated>2018-10-27T16:08:43.390Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1284" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h2>sol</h2><p>这题加深了我对背包的一些理解。。。</p><p>可以用来求哪些可以表示到，砝码称重好像也是这个思想？</p><p>一开始想的是：</p><p>b+c&gt;a , b&lt;a , c&lt;a, a=sum-b-c</p><p>然后就有sum/2&lt;b+c&lt;2*sum/3</p><p>然后背包表示b+c能取到的，但是b+c还能再分，所以不行</p><p>所以就是一个二维背包，状态转移可以看代码，其实还是比较好想的</p><p>但是从来没想过背包还能这样。。。神奇。。。</p><p>说到底还是我太弱了。。。</p><p>用一个二维表示能不能取到两个边长i,j，如果dp_{i,j}==true说明可以取到，然后就能求出另一条边长</p><p>然后判一下合法性+海伦公式就行了</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len[<span class="number">41</span>];</span><br><span class="line"><span class="keyword">int</span> ll,rr,sum;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">801</span>][<span class="number">801</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    a=max(x,y);a=max(a,sum-x-y);</span><br><span class="line">    c=min(x,y);c=min(c,sum-x-y);</span><br><span class="line">    b=sum-a-c;</span><br><span class="line">    <span class="keyword">if</span>(b+c&gt;a)</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(p*(p-a)*(p-b)*(p-c))*<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len[i]);</span><br><span class="line">        sum+=len[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p=(<span class="keyword">double</span>)(<span class="number">1.0</span>*sum/<span class="number">2.0</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">     per(j,<span class="number">800</span>,len[i])</span><br><span class="line">      per(k,j,<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">if</span>(dp[j-len[i]][k])</span><br><span class="line">       dp[j][k]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(k-len[i]&gt;=<span class="number">0</span>&amp;&amp;dp[j][k-len[i]])</span><br><span class="line">       dp[j][k]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">800</span>)</span><br><span class="line">     rep(j,<span class="number">1</span>,i)</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="keyword">if</span>(dp[i][j]&amp;&amp;judge(i,j))</span><br><span class="line">      ans=max(ans,calc(i,j,sum-i-j));</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>总结</h2><p>第一次接触这样的背包以及用背包来求是否可以组合出这样的数，算是二维背包?</p><p>对dp还是理解不够深啊。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1284&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="动态规划" scheme="http://www.sxyoi.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="背包" scheme="http://www.sxyoi.cn/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>逃离僵尸岛（图论操作-建立虚点）</title>
    <link href="http://www.sxyoi.cn/2018/10/26/%E9%80%83%E7%A6%BB%E5%83%B5%E5%B0%B8%E5%B2%9B/"/>
    <id>http://www.sxyoi.cn/2018/10/26/逃离僵尸岛/</id>
    <published>2018-10-26T06:39:00.000Z</published>
    <updated>2018-10-27T16:01:56.035Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3393" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h2>sol</h2><p>一个比较显然的想法是从每个被感染的点开始bfs处理出所有危险的点</p><p>但是更优（大概）的做法是建立一个0号虚点与所有被感染的点建立有向边后dfs，与0号点的距离&lt;=s+1的点都是危险的点</p><p>然后就是注意细节了。。。在1号城市和N城市，不需要住店。。。</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">800010</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis;</span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="keyword">bool</span> gr,dg,inq;</span><br><span class="line">&#125;node[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,s,p,qq,cnt;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].next=node[from].last;</span><br><span class="line">node[from].last=cnt;</span><br><span class="line">e[cnt].to=to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> node[x].dg?qq:p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> node[i].dis=<span class="number">-1</span>;</span><br><span class="line">q.push(<span class="number">0</span>);</span><br><span class="line">node[<span class="number">0</span>].inq=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">temp=node[q.front()].last;</span><br><span class="line"><span class="keyword">while</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(node[e[temp].to].dis&lt;<span class="number">0</span>||node[e[temp].to].dis&gt;node[q.front()].dis+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">node[e[temp].to].dis=node[q.front()].dis+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(node[e[temp].to].dis&lt;s&amp;&amp;!node[e[temp].to].inq)</span><br><span class="line">&#123;</span><br><span class="line">q.push(e[temp].to);</span><br><span class="line">node[e[temp].to].inq=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp=e[temp].next;</span><br><span class="line">&#125;</span><br><span class="line">node[q.front()].inq=<span class="number">0</span>;</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">rep(i,<span class="number">2</span>,n)</span><br><span class="line"> node[i].dis=<span class="number">-1</span>;</span><br><span class="line">node[<span class="number">1</span>].dis=<span class="number">0</span>;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">node[<span class="number">1</span>].inq=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">temp=node[q.front()].last;</span><br><span class="line"><span class="keyword">while</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(node[e[temp].to].gr)<span class="comment">//该城市被感染 -&gt;不能经过 </span></span><br><span class="line">&#123;</span><br><span class="line">temp=e[temp].next; </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(node[e[temp].to].dis&lt;<span class="number">0</span>||node[e[temp].to].dis&gt;node[q.front()].dis+value(e[temp].to))</span><br><span class="line">&#123;</span><br><span class="line">node[e[temp].to].dis=node[q.front()].dis+value(e[temp].to);</span><br><span class="line"><span class="keyword">if</span>(!node[e[temp].to].inq)</span><br><span class="line">&#123;</span><br><span class="line">node[e[temp].to].inq=<span class="number">1</span>;</span><br><span class="line">q.push(e[temp].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp=e[temp].next;</span><br><span class="line">&#125;</span><br><span class="line">node[q.front()].inq=<span class="number">0</span>;</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tx,ty;</span><br><span class="line">n=read();m=read();k=read();s=read();p=read();qq=read();</span><br><span class="line">rep(i,<span class="number">1</span>,k)</span><br><span class="line">&#123;</span><br><span class="line">tx=read();</span><br><span class="line">node[tx].gr=<span class="number">1</span>;</span><br><span class="line">add(<span class="number">0</span>,tx);</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,m)</span><br><span class="line">&#123;</span><br><span class="line">tx=read();ty=read();</span><br><span class="line">add(tx,ty);add(ty,tx);</span><br><span class="line">&#125;</span><br><span class="line">++s;</span><br><span class="line">spfa1();<span class="comment">//以0号为虚点，有向边连向所有被感染点，距离0点小于等于s+1的都是危险点 </span></span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> <span class="keyword">if</span>(node[i].dis&gt;<span class="number">0</span>&amp;&amp;node[i].dis&lt;=s)</span><br><span class="line">  node[i].dg=<span class="number">1</span>;</span><br><span class="line">spfa2();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,node[n].dis-value(n));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3393&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://www.sxyoi.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>NOIP模拟赛 期望</title>
    <link href="http://www.sxyoi.cn/2018/10/24/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B%20%E6%9C%9F%E6%9C%9B/"/>
    <id>http://www.sxyoi.cn/2018/10/24/NOIP模拟赛 期望/</id>
    <published>2018-10-24T06:39:00.000Z</published>
    <updated>2018-10-27T16:01:42.162Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/U47078" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h2>sol</h2><p>二进制下计算每一位出现0/1的概率</p><p>观察搜索树可知，显然可以dp</p><p>从上一个数每一位出现0/1的概率很容易转移到当前数每一位出现0/1的概率</p><p>复杂度O(n)</p><p>主要是细节问题，1个错误是第25行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;b[i];++j,b[i]&gt;&gt;=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>正确的写法是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">31</span>;++j,b[i]&gt;&gt;=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>因为如果前面有一个高位可以or出1，后面有个and，高位是0，第一种写法算不到那里，所以期望算出来应该是偏大？</p><p>其实是个很沙雕的错误，但是调了一上午orz</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100001</span>],b[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">double</span> c[<span class="number">100001</span>],ans,dp[<span class="number">40</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("exp.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("exp.out","w",stdout);</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line"><span class="keyword">bool</span> temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;c[i]);</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">31</span>)</span><br><span class="line"> dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">31</span>;++j,b[i]&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]&amp;<span class="number">1</span>)</span><br><span class="line"> temp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> temp=<span class="number">0</span>;</span><br><span class="line">x=dp[j][<span class="number">0</span>];y=dp[j][<span class="number">1</span>];</span><br><span class="line"><span class="comment">//dp[j][0]=0;dp[j][1]=0;</span></span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>)<span class="comment">//and</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line">dp[j][<span class="number">1</span>]=y;</span><br><span class="line">dp[j][<span class="number">0</span>]=<span class="number">1</span>-dp[j][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[j][<span class="number">1</span>]=y*c[i];</span><br><span class="line">dp[j][<span class="number">0</span>]=<span class="number">1</span>-dp[j][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="number">1</span>)<span class="comment">//or</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line">dp[j][<span class="number">0</span>]=x*c[i];</span><br><span class="line">dp[j][<span class="number">1</span>]=<span class="number">1</span>-dp[j][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[j][<span class="number">1</span>]=y;</span><br><span class="line">dp[j][<span class="number">0</span>]=<span class="number">1</span>-dp[j][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="number">2</span>)<span class="comment">//xor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line">dp[j][<span class="number">0</span>]=x*c[i]+y*(<span class="number">1</span>-c[i]);</span><br><span class="line">dp[j][<span class="number">1</span>]=<span class="number">1</span>-dp[j][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[j][<span class="number">0</span>]=x;</span><br><span class="line">dp[j][<span class="number">1</span>]=<span class="number">1</span>-dp[j][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">31</span>)</span><br><span class="line"> ans+=(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))*dp[i][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1f"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/U47078&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="期望" scheme="http://www.sxyoi.cn/tags/%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="动态规划" scheme="http://www.sxyoi.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>欧拉定理及扩展欧拉定理</title>
    <link href="http://www.sxyoi.cn/2018/10/18/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86%E5%8F%8A%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
    <id>http://www.sxyoi.cn/2018/10/18/欧拉定理及扩展欧拉定理/</id>
    <published>2018-10-18T15:41:27.000Z</published>
    <updated>2018-10-18T15:43:47.366Z</updated>
    
    <content type="html"><![CDATA[<p>待填坑</p><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/P1397" target="_blank" rel="noopener">例题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待填坑&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://www.sxyoi.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>初涉差分约束</title>
    <link href="http://www.sxyoi.cn/2018/10/18/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.sxyoi.cn/2018/10/18/差分约束学习笔记/</id>
    <published>2018-10-18T15:40:27.000Z</published>
    <updated>2018-10-18T15:42:30.471Z</updated>
    
    <content type="html"><![CDATA[<p>待填坑</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待填坑&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://www.sxyoi.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="差分约束" scheme="http://www.sxyoi.cn/tags/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>初探欧拉路径/欧拉回路(无序字母对)</title>
    <link href="http://www.sxyoi.cn/2018/10/17/%E5%88%9D%E6%8E%A2%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
    <id>http://www.sxyoi.cn/2018/10/17/初探欧拉路径/</id>
    <published>2018-10-16T23:02:00.000Z</published>
    <updated>2018-10-17T14:35:08.914Z</updated>
    
    <content type="html"><![CDATA[<p>初学欧拉路径</p><a id="more"></a><h3>欧拉路径和欧拉回路的概念</h3><p><a herf="[https://www.cnblogs.com/acxblog/">@ACX</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">什么是欧拉路径？在图上用一种走法经过所有的边一次且只有一次的路径叫做欧拉路径。即一笔画。</span><br><span class="line"></span><br><span class="line">如果这条路径的起点和终点重合，那么就是欧拉回路。</span><br></pre></td></tr></table></figure><p>欧拉回路就是一笔画最后又走回去了，欧拉路径就是走不回去但是可以一笔画。。。</p><p>所以要怎么确定一个图中是否存在欧拉路径/欧拉回路？</p><h3>无向图中</h3><p>欧拉路径：只有两个点的度数为奇数，其余均为偶数</p><p>欧拉回路：不存在度数为奇数的点</p><p><a href="https://www.cnblogs.com/acxblog/" target="_blank" rel="noopener">@ACX</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">无向图：因为欧拉路径中，除了起点与终点以外，任意点的“进”“出”次数相等，所以除了两个点为奇点（度数为奇数的点）（终点和起点）以外，其它点的度数均为偶数。</span><br><span class="line"></span><br><span class="line">如果是欧拉回路，奇点的个数应该为0。</span><br></pre></td></tr></table></figure><h3>有向图中</h3><p>欧拉路径：入度和出度不相等的点数不大于2（不一定是起点和终点，比如1-&gt;2-&gt;3-&gt;2，只有一个点入度不等于出度）</p><p>欧拉回路：所有点的入度均等于出度</p><p><a href="https://www.cnblogs.com/acxblog/" target="_blank" rel="noopener">@ACX</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有向图：欧拉路径中，最多只有两个点的入度不等于出度。起点出度比入度大1，终点入度比出度大1。</span><br><span class="line"></span><br><span class="line">如果是欧拉回路，所有点的 入度=出度 。</span><br></pre></td></tr></table></figure><h3>欧拉路径/欧拉回路的求法</h3><p>先找出起点和终点，然后dfs+回溯就ok</p><p><a herf="https://www.cnblogs.com/acxblog/p/7390301.html">这里说的比较好</a></p><hr><p>例题</p><p><a href="https://www.luogu.org/problemnew/show/P2731" target="_blank" rel="noopener">luoguP1341无序字母对</a></p><h2>sol</h2><p>给出一对字母对我们就可以看成是加了边，能生成n+1个字母的串包含这n个字母对的条件就是这个图包含欧拉路径/欧拉回路</p><p>也就是题目等价于：</p><p>给出n条边，要求求出一个字典序最小的方案，可以把每条边都走一遍，输出路径上的点</p><p>所以基本上就是一道欧拉路径/回路的模板题</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> e[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> deg[<span class="number">1001</span>],p_deg_cnt,s=<span class="number">1001</span>;</span><br><span class="line"><span class="keyword">char</span> o_seq[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> sxy,solved;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">o_seq[depth]=now;</span><br><span class="line"><span class="keyword">if</span>(depth==n+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">solved=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,(<span class="keyword">int</span>)<span class="string">'A'</span>,(<span class="keyword">int</span>)<span class="string">'z'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[now][i])</span><br><span class="line">&#123;</span><br><span class="line">e[now][i]=<span class="number">0</span>;e[i][now]=<span class="number">0</span>;</span><br><span class="line">dfs(i,depth+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(solved)</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">e[now][i]=<span class="number">1</span>;e[i][now]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tx,ty;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>((tx=getchar())==<span class="string">' '</span>||tx==<span class="string">'\n'</span>||tx==<span class="string">'\r'</span>);</span><br><span class="line">ty=getchar();</span><br><span class="line">e[(<span class="keyword">int</span>)tx][(<span class="keyword">int</span>)ty]=<span class="number">1</span>;e[(<span class="keyword">int</span>)ty][(<span class="keyword">int</span>)tx]=<span class="number">1</span>;</span><br><span class="line">deg[(<span class="keyword">int</span>)tx]++;deg[(<span class="keyword">int</span>)ty]++;</span><br><span class="line">s=min(s,(<span class="keyword">int</span>)tx);s=min(s,(<span class="keyword">int</span>)ty);</span><br><span class="line">&#125;</span><br><span class="line">rep(i,(<span class="keyword">int</span>)<span class="string">'A'</span>,(<span class="keyword">int</span>)<span class="string">'z'</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(deg[i]&amp;<span class="number">1</span>)<span class="comment">//judge degree</span></span><br><span class="line"> &#123;</span><br><span class="line">  ++p_deg_cnt;</span><br><span class="line">  <span class="keyword">if</span>(!sxy)</span><br><span class="line">  &#123;</span><br><span class="line">  sxy=<span class="number">1</span>;s=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   s=min(s,i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p_deg_cnt&gt;=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(s,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(solved)</span><br><span class="line"> rep(i,<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>,o_seq[i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初学欧拉路径&lt;/p&gt;
    
    </summary>
    
    
      <category term="DFS" scheme="http://www.sxyoi.cn/tags/DFS/"/>
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="欧拉路径/欧拉回路" scheme="http://www.sxyoi.cn/tags/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84-%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>旅行家的预算</title>
    <link href="http://www.sxyoi.cn/2018/10/17/%E6%97%85%E8%A1%8C%E5%AE%B6%E7%9A%84%E9%A2%84%E7%AE%97/"/>
    <id>http://www.sxyoi.cn/2018/10/17/旅行家的预算/</id>
    <published>2018-10-16T16:06:00.000Z</published>
    <updated>2018-10-16T16:06:42.305Z</updated>
    
    <content type="html"><![CDATA[<p>NOIP 1999 TG <a href="https://www.luogu.org/problemnew/show/P1016" target="_blank" rel="noopener">旅行家的预算</a></p><a id="more"></a><h2>sol</h2><p>先判断No Sol的情况：存在(d[i]-d[i-1])/d2&gt;c</p><p>然后对每个点贪心，先加恰好到的，然后把这个点加进堆里，后面可以用这个点加油</p><p>注意到油箱容量，用到这个点的时候它后面的到当前点之前的点的剩余油量增加，也就是这些点能加的油少了，维护一个这个东西，再用priority_queue按价格排序并记录序号就好了</p><p>写的时候犯了不少zz错误，忘了除以d2最甚</p><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TEMP</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> p;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> TEMP &amp;b)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p&gt;b.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tem;</span><br><span class="line"><span class="keyword">double</span> d1,c,d2;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> d[<span class="number">8</span>],p[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">double</span> fuel[<span class="number">7</span>],ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> wzy;</span><br><span class="line">    priority_queue&lt;TEMP&gt; sb;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;d1&gt;&gt;c&gt;&gt;d2&gt;&gt;p[<span class="number">0</span>]&gt;&gt;n;</span><br><span class="line">    d[n+<span class="number">1</span>]=d1;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">     <span class="built_in">cin</span>&gt;&gt;d[i]&gt;&gt;p[i];</span><br><span class="line">    sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line">     <span class="keyword">if</span>(d[i]-d[i<span class="number">-1</span>]&gt;c*d2)</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    tem.p=p[<span class="number">0</span>];tem.num=<span class="number">0</span>;</span><br><span class="line">    sb.push(tem);</span><br><span class="line">    rep(i,<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        wzy=d[i]-d[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(wzy&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tem=sb.top();</span><br><span class="line">            <span class="keyword">while</span>(fuel[tem.num]&gt;=c)<span class="comment">//already full</span></span><br><span class="line">            &#123;</span><br><span class="line">                sb.pop();</span><br><span class="line">                tem=sb.top();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((c-fuel[tem.num])*d2&gt;wzy)<span class="comment">//able to fill to arrive</span></span><br><span class="line">            &#123;</span><br><span class="line">                rep(t,tem.num,i<span class="number">-1</span>)</span><br><span class="line">                 fuel[t]+=wzy/d2;</span><br><span class="line">                ans+=tem.p*(wzy/d2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//unable</span></span><br><span class="line">            &#123;</span><br><span class="line">                rep(t,tem.num+<span class="number">1</span>,i<span class="number">-1</span>)</span><br><span class="line">                 fuel[t]+=(c-fuel[tem.num]);</span><br><span class="line">                wzy-=(c-fuel[tem.num])*d2;</span><br><span class="line">                ans+=tem.p*(c-fuel[tem.num]);</span><br><span class="line">                sb.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tem.p=p[i];tem.num=i;</span><br><span class="line">        sb.push(tem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NOIP 1999 TG &lt;a href=&quot;https://www.luogu.org/problemnew/show/P1016&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;旅行家的预算&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="贪心" scheme="http://www.sxyoi.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="堆" scheme="http://www.sxyoi.cn/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>传纸条</title>
    <link href="http://www.sxyoi.cn/2018/10/16/%E4%BC%A0%E7%BA%B8%E6%9D%A1/"/>
    <id>http://www.sxyoi.cn/2018/10/16/传纸条/</id>
    <published>2018-10-16T15:49:00.000Z</published>
    <updated>2018-10-16T16:00:25.350Z</updated>
    
    <content type="html"><![CDATA[<p>NOIP2008 T3 <a href="https://www.luogu.org/problemnew/show/P1006" target="_blank" rel="noopener">传纸条</a></p><a id="more"></a><h2>sol</h2><p>显然可以dp，推了二十分钟感觉传纸条的路径大概是让一个多边形的轮廓覆盖的权值最大。。。</p><p>其实就是找不重叠的两条路能覆盖的最大权值这意思吧。。。</p><p>单条路推进想了好久怎么不让路径重叠。。。然后回家发现直接两条路一并推进就会很好做。。。</p><p>因为显然两条路在推进相同步数的条件下它们的横、纵坐标肯定都不相等，否则就是交叉或者重叠的情况了，基于这点来做就可以了</p><p>递推不会写。。。于是写了记忆化搜索。。。</p><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">51</span>][<span class="number">51</span>][<span class="number">51</span>][<span class="number">51</span>],mapp[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">if</span>(dp[i][j][k][w])</span><br><span class="line">     <span class="keyword">return</span> dp[i][j][k][w];</span><br><span class="line">    <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n&amp;&amp;k+<span class="number">1</span>&lt;=n)</span><br><span class="line">     dp[i][j][k][w]=max(dp[i][j][k][w],dfs(i+<span class="number">1</span>,j,k+<span class="number">1</span>,w));</span><br><span class="line">    <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n&amp;&amp;w+<span class="number">1</span>&lt;=m)</span><br><span class="line">     dp[i][j][k][w]=max(dp[i][j][k][w],dfs(i+<span class="number">1</span>,j,k,w+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(j+<span class="number">1</span>&lt;w&amp;&amp;k+<span class="number">1</span>&lt;=n)</span><br><span class="line">     dp[i][j][k][w]=max(dp[i][j][k][w],dfs(i,j+<span class="number">1</span>,k+<span class="number">1</span>,w));</span><br><span class="line">    <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=w&amp;&amp;w+<span class="number">1</span>&lt;=m)</span><br><span class="line">     dp[i][j][k][w]=max(dp[i][j][k][w],dfs(i,j+<span class="number">1</span>,k,w+<span class="number">1</span>));</span><br><span class="line">    dp[i][j][k][w]+=(mapp[i][j]+mapp[k][w]);</span><br><span class="line">    <span class="keyword">return</span> dp[i][j][k][w];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">     rep(j,<span class="number">1</span>,m)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;mapp[i][j]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2>others</h2><p>从这篇开始有点不想复制题面了 。。。看心情吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NOIP2008 T3 &lt;a href=&quot;https://www.luogu.org/problemnew/show/P1006&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传纸条&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="动态规划" scheme="http://www.sxyoi.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="记忆化搜索" scheme="http://www.sxyoi.cn/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>luogu P1119 灾后重建</title>
    <link href="http://www.sxyoi.cn/2018/10/16/%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/"/>
    <id>http://www.sxyoi.cn/2018/10/16/灾后重建/</id>
    <published>2018-10-16T09:25:00.000Z</published>
    <updated>2018-10-16T15:48:28.198Z</updated>
    
    <content type="html"><![CDATA[<p>做了这题才发现自己对floyd有多不了解。。。</p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目背景</h2><p>$B$地区在地震过后，所有村庄都造成了一定的损毁，而这场地震却没对公路造成什么影响。但是在村庄重建好之前，所有与未重建完成的村庄的公路均无法通车。换句话说，只有连接着两个重建完成的村庄的公路才能通车，只能到达重建完成的村庄。</p><h2>题目描述</h2><p>给出$B$地区的村庄数$N$，村庄编号从$0$到$N-1$，和所有$M$条公路的长度，公路是双向的。并给出第$i$个村庄重建完成的时间$t_i$，你可以认为是同时开始重建并在第$t_i$天重建完成，并且在当天即可通车。若$t_i$为$0$则说明地震未对此地区造成损坏，一开始就可以通车。之后有$Q$个询问$(x, y, t)$，对于每个询问你要回答在第$t$天，从村庄$x$到村庄y的最短路径长度为多少。如果无法找到从$x$村庄到$y$村庄的路径，经过若干个已重建完成的村庄，或者村庄$x$或村庄$y$在第t天仍未重建完成 ，则需要返回$-1$。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第一行包含两个正整数$N,M$，表示了村庄的数目与公路的数量。</p><p>第二行包含$N$个非负整数$t_0, t_1,…, t_{N-1}$，表示了每个村庄重建完成的时间，数据保证了$t_0 ≤ t_1 ≤ … ≤ t_{N-1}$。</p><p>接下来$M$行，每行$3$个非负整数$i, j, w$，$w$为不超过$10000$的正整数，表示了有一条连接村庄$i$与村庄$j$的道路，长度为$w$，保证$i≠j$，且对于任意一对村庄只会存在一条道路。</p><p>接下来一行也就是$M+3$行包含一个正整数$Q$，表示$Q$个询问。</p><p>接下来$Q$行，每行$3$个非负整数$x, y, t$，询问在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少，数据保证了$t$是不下降的。</p><p></p><strong>输出格式：</strong><br><p></p><p>共$Q$行，对每一个询问$(x, y, t)$输出对应的答案，即在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少。如果在第t天无法找到从$x$村庄到$y$村庄的路径，经过若干个已重建完成的村庄，或者村庄x或村庄$y$在第$t$天仍未修复完成，则输出$-1$。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 51 2 3 40 2 12 3 13 1 22 1 40 3 542 0 20 1 20 1 30 1 4</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>-1-154</pre></div></div><h2>说明</h2><p>对于$30\%$的数据，有$N≤50$；</p><p>对于$30\%$的数据，有$t_i= 0$，其中有$20\%$的数据有$t_i = 0$且$N&gt;50$；</p><p>对于$50\%$的数据，有$Q≤100$；</p><p>对于$100\%$的数据，有$N≤200$，$M≤N \times (N-1)/2$，$Q≤50000$，所有输入数据涉及整数均不超过$100000$。</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div>---<h2>sol</h2><p>这题很大程度上加深了我对Floyd的理解</p><p>先想到的是每次对每个查询点跑一边spfa，只走时间可行的边，但是算了下复杂度不太对</p><p>然后就想多源最短路，记录一个当前的最外层循环跑到了哪里，从前往后时间上慢慢递推松弛</p><p>总的思想对了，但是中间错了，我加边的时候以为双向边不太对，然后就按单向边加，从时间晚的连向时间早的，并不对，而且最外层循环到达当前时间的点之间松弛并不会用到当前时间的点</p><p>因为原生的floyd是f[k]/[i]/[j]表示经过前k个点i到j的最小距离，然后写的时候一般就把第一维去掉了，</p><p>然后改过来就对了，但是并没想到是那里错了，看了题解才知道，一直在考虑i,j的问题</p><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,t[<span class="number">201</span>],q;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">201</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">     dis[i][i]=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">     t[i]=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        dis[ty+<span class="number">1</span>][tx+<span class="number">1</span>]=tz;</span><br><span class="line">        dis[tx+<span class="number">1</span>][ty+<span class="number">1</span>]=tz;</span><br><span class="line">    &#125;</span><br><span class="line">    q=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,q)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        <span class="keyword">while</span>(t[cnt]&lt;=tz&amp;&amp;cnt&lt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            rep(u,<span class="number">1</span>,n)</span><br><span class="line">             rep(v,<span class="number">1</span>,n)</span><br><span class="line">              dis[u][v]=min(dis[u][v],dis[u][cnt]+dis[cnt][v]);</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t[tx+<span class="number">1</span>]&gt;tz||t[ty+<span class="number">1</span>]&gt;tz||dis[tx+<span class="number">1</span>][ty+<span class="number">1</span>]==<span class="number">0x3f3f3f3f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[tx+<span class="number">1</span>][ty+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2>参考</h2><p><a href="http://www.360doc.com/userhome/14357424" target="_blank" rel="noopener">@Rainboy913</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为了加深对floyd算法的认识，特地搜了一下floyd算法的证明。原来floyd算法的本质是一个动态规划的过程。</span><br><span class="line">状态转移方程：</span><br><span class="line"></span><br><span class="line">f[k][i][j]=min(f[k-1][i][j],f[k-1][i][k]+f[k-1][k][j])</span><br><span class="line"></span><br><span class="line">f[k][i][j]表示只经过前k个点(包括k)，从i到j的最小值。当k从1到n时，就是从i到j的最小值。我们熟悉的用二维数组的写法实际上是对空间的一种压缩。</span><br><span class="line"></span><br><span class="line">解释一下：</span><br><span class="line"></span><br><span class="line">计算只经过前k个点，从i到j的最小值时，有两种情况需要考虑：经过第k个点和不经过第k个点。经过第k个点则距离应是从i到k的最小值和从k到j的最小值，两个最小值的路径都必须只经过前k-1个点（为什么是k-1而不是k，事实上他们两数值相同，因为起点和终点已经有第k个点，只是在dp的过程中先产生k-1，f[k][i][k]和f[k][k][j]有可能比f[k][i][j]的值晚计算出，就不能在计算f[k][i][j]时用到这两个值）。不经过k的点则距离与只经过前k-1个点时一样。</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.org/space/show?uid=48036" target="_blank" rel="noopener">@秋日私语</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这道题加深了我对Floyed算法的理解。</span><br><span class="line"></span><br><span class="line">首先谈谈Floyed算法：Floyd算法的本质是动态规划，其转移方程 为：f[k][i][j] = min( f[k-1][i][j], f([k-1][i] [k])+f[k-1][k][j] )。</span><br><span class="line"></span><br><span class="line">f[k][i][j]表示路径除开起点i与终点j，只经过前k个点中的某些 点，从i到j的最小值。计算这个值只需要考虑两种情况：最短路经 过k，和最短路不经过k（那么就经过前k-1个点中的某些点）。由于 k要从k-1转移而来，自然k为最外层的循环。而经过滚动（类似于背 包问题）后，就变成了我们熟悉的f[i][j]=min(f[i][j],f[i] [k]+f[k][j])了。</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.org/space/show?uid=17667" target="_blank" rel="noopener">@feilongz</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">一开始想到许多玄学的思路。</span><br><span class="line"></span><br><span class="line">最早的思路——30数据可以不考虑修理，一遍floyd就行。</span><br><span class="line"></span><br><span class="line">然后我的思路是，记一下每条边，每次加响应时间的边，跑最短路。</span><br><span class="line"></span><br><span class="line">大概可行吧。。不过马力不够，状态表示不出来，而且显然效率不够吧。</span><br><span class="line"></span><br><span class="line">还有个更严肃的问题是，并不是边修理的时间，而是点。</span><br><span class="line"></span><br><span class="line">最后还是靠理解floyd。</span><br><span class="line"></span><br><span class="line">首先N很小，一般来说N小的时候我都随便跑循环。可以想到floyd就算稍微加点循环也不会有问题。</span><br><span class="line"></span><br><span class="line">考虑一下floyd的实现，其实就是DP。枚举一个断点k，用k去更新其他最短路，最后得出最优解。这个k就是关键——正常的算法k只是单纯枚举，这次只要稍加考虑就行了。考虑k点的时间是否符合当前要求。</span><br><span class="line"></span><br><span class="line">显然时间和要求需要排序，不过出题人和善的都排好了。</span><br><span class="line"></span><br><span class="line">于是我枚举每个问题，在问题里枚举k，看k点重建时间是否小于当前问题，是的话就用k去更新其他点。这里要注意任何一个k都只更新一遍，我用一个vis数组记录，这样才能保证效率不会退化为（n^3q），因为只执行一遍floyd，剩下的问题只要用处理好的图即可，可知效率应当是（n^3+q)，这完全可以接受了。</span><br><span class="line"></span><br><span class="line">如果不记录，我T了7个点。</span><br><span class="line"></span><br><span class="line">不过这个算法就算A了效率还是奇低。。</span><br><span class="line"></span><br><span class="line">P.S.：更新的时候不要下意识的把i，j的时间考虑上，完全没关系。输出-1 -1 5 5的可能是这个问题。</span><br><span class="line"></span><br><span class="line">最后上代码。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了这题才发现自己对floyd有多不了解。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="最短路" scheme="http://www.sxyoi.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="Floyd" scheme="http://www.sxyoi.cn/tags/Floyd/"/>
    
  </entry>
  
  <entry>
    <title>双栈排序</title>
    <link href="http://www.sxyoi.cn/2018/10/15/%E5%8F%8C%E6%A0%88%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.sxyoi.cn/2018/10/15/双栈排序/</id>
    <published>2018-10-15T13:11:01.000Z</published>
    <updated>2018-10-15T14:39:35.311Z</updated>
    
    <content type="html"><![CDATA[<p>NOIP 2008 TG</p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p><code>Tom</code>最近在研究一个有趣的排序问题。如图所示，通过$2$个栈$S_1$和$S_2$，<code>Tom</code>希望借助以下$4$种操作实现将输入序列升序排序。</p><p><img src="https://cdn.luogu.org/upload/pic/51.png" alt=""> </p><p>操作$a$</p><p>如果输入序列不为空，将第一个元素压入栈$S_1$</p><p>操作$b$</p><p>如果栈$S_1$不为空，将$S_1$栈顶元素弹出至输出序列</p><p>操作$c$</p><p>如果输入序列不为空，将第一个元素压入栈$S_2$</p><p>操作$d$</p><p>如果栈$S_2$不为空，将$S_2$栈顶元素弹出至输出序列</p><p>如果一个$1-n$的排列P可以通过一系列操作使得输出序列为$1,2,…,(n-1),n$，<code>Tom</code>就称$P$是一个“可双栈排序排列”。例如$(1,3,2,4)$就是一个“可双栈排序序列”，而$(2,3,4,1)$不是。下图描述了一个将$(1,3,2,4)$排序的操作序列：$&lt;a,c,c,b,a,d,d,b&gt;$</p><p><img src="https://cdn.luogu.org/upload/pic/52.png" alt=""> </p><p>当然，这样的操作序列有可能有几个，对于上例$(1,3,2,4)$，$&lt;a,c,c,b,a,d,d,b&gt;$是另外一个可行的操作序列。<code>Tom</code>希望知道其中字典序最小的操作序列是什么。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第一行是一个整数$n$。</p><p>第二行有$n$个用空格隔开的正整数，构成一个$1-n$的排列。</p><p></p><strong>输出格式：</strong><br><p></p><p>共一行，如果输入的排列不是“可双栈排序排列”，输出数字$0$；否则输出字典序最小的操作序列，每两个操作之间用空格隔开，行尾没有空格。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>41 3 2 4</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>a b a a b b a b</pre></div></div><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#2：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>42 3 4 1</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#2：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>0</pre></div></div><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#3：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>32 3 1</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#3：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>a c a b b d</pre></div></div><h2>说明</h2><p>$30\%$的数据满足： $n \le 10$</p><p>$50\%$的数据满足：$ n \le 50$</p><p>$100\%$的数据满足： $n \le 1000$</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div>---<h1>sol</h1><p>双栈，先考虑一比较简单的问题，化简问题，双-&gt;单</p><p>单栈用来干什么？逆序对输出的缓存空间。</p><p>单栈排序什么时候无法进行？</p><p>错误结论：</p><p>存在a[i]&lt;a[j]&lt;a[k]，j&lt;i&lt;k时，不能单栈排序</p><p>得出原因：</p><p>3 2 4</p><p>起决定性作用的并不是3 2 4，而是1的相对位置</p><p>譬如1 3 2 4，3 1 2 4，3 2 1 4就可以，3 2 4 1就不可以</p><p>再看1的相对位置，更简化的一组数据即为</p><p>2 3 1</p><p>可见上面那组其决定性的是2 4 1</p><p>可得出正确结论：</p><p>存在i&lt;j&lt;k ， a[j]&gt;a[i]&gt;a[k]时不能进行单栈排序</p><p>有峰？1 3 2 4也有</p><p>单峰？并不是</p><p>不知道怎么定义这个东西，大概就是一个峰，左降慢右降快（好像不是一直）</p><p>要验证不能进行单栈排序，显然可以暴力，O(n^3)</p><p>可以预处理前后缀最小值，然后枚举j来O(n)做吧？貌似并不能，与a[i]具体取值也有关，不一定min</p><p>但是可以O(n^2)，a[k]最小，就从k入手好了</p><p>维护后缀最小值f[i]=min{a[i],a[i+1],…,a[n]}</p><p>然后条件转成了a[j]&gt;a[i]&gt;f[j+1]，应该是O(n^2)了</p><p>然后再一想，我们有两个栈！！！！</p><p>那这些不能放在一个栈里的有部分就可以搞掉了，但并不能解决掉所有</p><p>考虑 2 3 1</p><p>我们可以把2放进另一个栈，也可以把3放进另一个栈，但显然把3放进另一个字典序会更小，</p><p>也就是说，出现单栈解决不了的之后我们就把那个“峰”放进另一个栈</p><p>这就像是二分图了，分成了两部分，对吧</p><p>那我们在考虑什么时候两个栈都解决不了：放入另一个栈的之间会冲突</p><p>那就完全是个二分图的判定了</p><p>每出现一个那样的“峰”，我们就把两个“脊”和峰之间连一条边，最后判定一下是不是二分图，不是就输出0，是就模拟输出过程，就ok了，第一个染的点当然是放进第一个栈，没边没染的也是</p><p>（其实没有必要给右边的“脊”加边，因为f[i]是后缀最小值，所以无法构造出一个能成为峰的右“脊”（可以用反证法），所以没有必要）</p><p>emmm不是很懂为什么输出的时候一弹就要弹到不能再弹，大概跟前面的某些性质有关？</p><p>所以前面思考单栈当然是有用的，单栈的n<sup>3显然对1000是过不了的，而n</sup>2就可以了</p><p>然后其实也可以考虑用并查集，二分图和并查集好像还是比较相似的？</p><p>那就是把峰弄到一个集合，脊弄到另一个？</p><p>但是好像二分图染色比较更好弄？</p><p>不过貌似并查集可以在线边处理边判断是否有解？</p><p>这个题乍一看真的不像图论题。。。感觉跟图论一点关系都没有。。。然后贪心模拟30分orzco’l</p><p>大概相当于搜索分(O(4^n))？</p><p><a href="https://www.luogu.org/space/show?uid=21596" target="_blank" rel="noopener">@Forever丶CIL</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">一看这道题，感觉好难啊，感觉这道题爆捜都写不出来，</span><br><span class="line"></span><br><span class="line">但是看他是“双栈”，我就联想到了P1654；一个思路</span><br><span class="line"></span><br><span class="line">看见“双”，先想“单”，假设我们只有一个栈，怎么排序？</span><br><span class="line"></span><br><span class="line">考虑栈在排序中起了什么作用，其实就是辅助交换逆序对</span><br><span class="line"></span><br><span class="line">而它的能力有限，对于-&gt;2 3 1这样的数据是无能为力的</span><br><span class="line"></span><br><span class="line">我们看看像“2 3 1”，这种数据有什么性质</span><br><span class="line"></span><br><span class="line">-&gt;给2 3 1分别记为a1 a2 a3我们发现a3&lt;a1&lt;a2;再找其他几组满足</span><br><span class="line"></span><br><span class="line">a3&lt;a1&lt;a2的数据，我们会发现都不可以用单栈排序；</span><br><span class="line"></span><br><span class="line">所以我们就发现了本题的重要性质之一，这种情况下，我们</span><br><span class="line"></span><br><span class="line">就可以将a1压进1号栈，a2压进2号栈，a3压进1号栈，再分别</span><br><span class="line"></span><br><span class="line">弹出a3，a1，a2，就完成了排序。</span><br><span class="line"></span><br><span class="line">那么双栈是不是万能的呢？</span><br><span class="line"></span><br><span class="line">当然也不是了。。。</span><br><span class="line"></span><br><span class="line">我们考虑当a4&lt;a1&lt;a2&lt;a3时，是不是双栈就GG了？</span><br><span class="line"></span><br><span class="line">所以说，我们要判断可不可以用双栈排序，本质上就是要判断数列中存不存在</span><br><span class="line"></span><br><span class="line">a4&lt;a1&lt;a2&lt;a3。当然我们可以暴力判O(n^4) 2333，也可以优化一下先预处理出</span><br><span class="line"></span><br><span class="line">后缀最小值，然后O(n^3)判断，当然都会TLE。。或许其他大佬有更快的做法</span><br><span class="line"></span><br><span class="line">我这里写的是二分图染色的做法，具体解释在代码中。</span><br></pre></td></tr></table></figure><hr><h1>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分图代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;<span class="keyword">bool</span> t=<span class="number">0</span>;<span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;t=<span class="number">1</span>;c=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> s1[<span class="number">1001</span>],s1_top,s2[<span class="number">1001</span>],s2_top;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">1001</span>],cnt;</span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> col[<span class="number">1001</span>],tt_col[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> noSol=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].next=last[from];</span><br><span class="line">last[from]=cnt;</span><br><span class="line">e[cnt].to=to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> t_col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">col[now]=t_col;</span><br><span class="line"><span class="keyword">int</span> temp=last[now];</span><br><span class="line"><span class="keyword">while</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(col[e[temp].to]&lt;<span class="number">0</span>)</span><br><span class="line"> dfs(e[temp].to,tt_col[t_col]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(col[e[temp].to]!=tt_col[t_col])</span><br><span class="line">&#123;</span><br><span class="line">noSol=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(noSol)</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">temp=e[temp].next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> col[i]=<span class="number">-1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> a[i]=read();</span><br><span class="line">f[n]=a[n];</span><br><span class="line">per(i,n<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line"> f[i]=min(f[i+<span class="number">1</span>],a[i]);</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-2</span>)</span><br><span class="line"> rep(j,i+<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">  <span class="keyword">if</span>(a[j]&gt;a[i]&amp;&amp;a[i]&gt;f[j+<span class="number">1</span>])</span><br><span class="line">  &#123;</span><br><span class="line">  add(i,j);add(j,i);</span><br><span class="line">  &#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(col[i]&lt;<span class="number">0</span>)</span><br><span class="line"> dfs(i,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(noSol)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(col[i])</span><br><span class="line">&#123;</span><br><span class="line">s2[++s2_top]=a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"c "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s1[++s1_top]=a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((s1[s1_top]==cnt&amp;&amp;s1_top)||(s2[s2_top]==cnt&amp;&amp;s2_top))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s1[s1_top]==cnt)</span><br><span class="line">&#123;</span><br><span class="line">--s1_top;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">--s2_top;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"d "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NOIP 2008 TG&lt;/p&gt;
    
    </summary>
    
    
      <category term="DFS" scheme="http://www.sxyoi.cn/tags/DFS/"/>
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="二分图" scheme="http://www.sxyoi.cn/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="并查集" scheme="http://www.sxyoi.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>树网的核</title>
    <link href="http://www.sxyoi.cn/2018/10/15/%E6%A0%91%E7%BD%91%E7%9A%84%E6%A0%B8/"/>
    <id>http://www.sxyoi.cn/2018/10/15/树网的核/</id>
    <published>2018-10-14T23:02:00.000Z</published>
    <updated>2018-10-15T14:33:26.012Z</updated>
    
    <content type="html"><![CDATA[<p>NOIP 2007 TG T4</p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>设$T=(V,E,W)$是一个无圈且连通的无向图（也称为无根树），每条边到有正整数的权，我们称$T$为树网（<code>treebetwork</code>），其中$V$，$E$分别表示结点与边的集合，$W$表示各边长度的集合，并设$T$有$n$个结点。</p><p>路径：树网中任何两结点$a$，$b$都存在唯一的一条简单路径，用$d(a, b)$表示以$a, b$为端点的路径的长度，它是该路径上各边长度之和。我们称$d(a, b)$为$a, b$两结点间的距离。</p><p>$D(v, P)=\min\{d(v, u)\}$, $u$为路径$P$上的结点。</p><p>树网的直径：树网中最长的路径成为树网的直径。对于给定的树网$T$，直径不一定是唯一的，但可以证明：各直径的中点（不一定恰好是某个结点，可能在某条边的内部）是唯一的，我们称该点为树网的中心。</p><p>偏心距$\mathrm{ECC}(F)$：树网T中距路径F最远的结点到路径$F$的距离，即</p><p>$\mathrm{ECC}(F)=\max\{d(v, F),v \in V\}$</p><p>任务：对于给定的树网$T=(V, E, W)$和非负整数$s$，求一个路径$F$，他是某直径上的一段路径（该路径两端均为树网中的结点），其长度不超过$s$（可以等于s），使偏心距$ECC(F)$最小。我们称这个路径为树网$T=(V, E, W)$的核（<code>Core</code>）。必要时，$F$可以退化为某个结点。一般来说，在上述定义下，核不一定只有一个，但最小偏心距是唯一的。</p><p>下面的图给出了树网的一个实例。图中，$A-B$与$A-C$是两条直径，长度均为$20$。点$W$是树网的中心，$EF$边的长度为$5$。如果指定$s=11$，则树网的核为路径<code>DEFG</code>（也可以取为路径<code>DEF</code>），偏心距为$8$。如果指定$s=0$（或$s=1$、$s=2$），则树网的核为结点$F$，偏心距为$12$。</p><p><img src="https://cdn.luogu.org/upload/pic/20270.png" alt=""></p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>共$n$行。</p><p>第$1$行，两个正整数$n$和$s$，中间用一个空格隔开。其中$n$为树网结点的个数，$s$为树网的核的长度的上界。设结点编号以此为$1,2,…,n$。</p><p>从第$2$行到第$n$行，每行给出$3$个用空格隔开的正整数，依次表示每一条边的两个端点编号和长度。例如，“$2 4 7$”表示连接结点$2$与$4$的边的长度为$7$。</p><p></p><strong>输出格式：</strong><br><p></p><p>一个非负整数，为指定意义下的最小偏心距。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>5 21 2 52 3 22 4 42 5 3</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>5</pre></div></div><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#2：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>8 61 3 22 3 2 3 4 64 5 34 6 44 7 27 8 3</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#2：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>5</pre></div></div><h2>说明</h2><p>$40\%$的数据满足：$5 \le n \le 15$<br>$70\%$的数据满足：$5 \le n \le 80$<br>$100\%$的数据满足：$5 \le n \le 300,0 \le s \le 1000$。边长度为不超过$1000$的正整数</p><p>NOIP 2007 提高第四题</p>---<h1>sol</h1><p>看第一眼并想不出什么做法，感觉直径会有多条，然后就感觉很迷</p><p>然后就有种感觉，貌似任意挑出一条直径答案都是一样的？</p><p>然后抱着大胆猜想不用证明的心态，过了。。。</p><p>我的做法就是先跑一遍floyd，再两遍dfs找直径，然后再dfs找直径上的点，最后再在直径上找核，差不多就是枚举核的左右端点，可以尺取，因为一条路径的子路径一定不会比这条路径总的更优，也算是一个比较233的优化？</p><p>但是尺取并不会写，所以写了个类似的东西来代替</p><p>然后就在找到的可能为核的路径上一个一个去搞到每个点的距离，其实就是取个min</p><p>复杂度大概是O(n<sup>3)，又或许是O(n</sup>4)？看了下数据范围能过</p><p>但是好像可以O(n)来做。。。</p><p>思想是比较简单的，但是代码却比较麻烦。。。</p><p>犯的一些sb错误：</p><p>​++j和算temp顺序反了</p><p>​直接用的直径上的点的相对编号。。。</p><p>​忘了给temp加上。。。</p><p>这个数据范围基本上是个模拟题，当练代码能力好了。。。</p><hr><h1>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">300</span>*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">301</span>][<span class="number">301</span>],n,s;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">301</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> sb,zc=<span class="number">-1</span>,sb2,zc2=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">301</span>],solved;</span><br><span class="line"><span class="keyword">int</span> zj[<span class="number">301</span>],zcnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span><span class="comment">//dis</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(k,<span class="number">1</span>,n)</span><br><span class="line">     rep(i,<span class="number">1</span>,n)</span><br><span class="line">      rep(j,<span class="number">1</span>,n)</span><br><span class="line">       dis[i][j]=min(dis[i][k]+dis[k][j],dis[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> len)</span><span class="comment">//zhi jing</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len&gt;zc)</span><br><span class="line">    &#123;</span><br><span class="line">        sb=now;</span><br><span class="line">        zc=len;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=last[now];</span><br><span class="line">    <span class="keyword">while</span>(temp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[e[temp].to])</span><br><span class="line">         dfs(e[temp].to,len+e[temp].v);</span><br><span class="line">        temp=e[temp].next;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> len)</span><span class="comment">//zhi jing</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len&gt;zc2)</span><br><span class="line">    &#123;</span><br><span class="line">        sb2=now;</span><br><span class="line">        zc2=len;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=last[now];</span><br><span class="line">    <span class="keyword">while</span>(temp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[e[temp].to])</span><br><span class="line">         dfs2(e[temp].to,len+e[temp].v);</span><br><span class="line">        temp=e[temp].next;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_path</span><span class="params">(<span class="keyword">int</span> now)</span><span class="comment">//zhi_jing_path</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    zj[++zcnt]=now;</span><br><span class="line">    vis[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(now==sb2)</span><br><span class="line">    &#123;</span><br><span class="line">        solved=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp=last[now];</span><br><span class="line">    <span class="keyword">while</span>(temp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[e[temp].to])</span><br><span class="line">         dfs_path(e[temp].to);</span><br><span class="line">        <span class="keyword">if</span>(solved)</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">        temp=e[temp].next;</span><br><span class="line">    &#125;</span><br><span class="line">    --zcnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> diss[<span class="number">301</span>];</span><br><span class="line">    <span class="keyword">int</span> sxy,ans=<span class="number">2147483647</span>,temp;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz;</span><br><span class="line">    n=read();s=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">     dis[i][i]=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        dis[tx][ty]=tz;</span><br><span class="line">        dis[ty][tx]=tz;</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">        add(ty,tx,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    floyd();</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs2(sb,<span class="number">0</span>);</span><br><span class="line">    dfs_path(sb);</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    rep(i,<span class="number">1</span>,zcnt)</span><br><span class="line">    &#123;</span><br><span class="line">    temp=<span class="number">0</span>;sxy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(vis[zcnt])</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">    j=i;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;zcnt&amp;&amp;temp+dis[zj[j]][zj[j+<span class="number">1</span>]]&lt;=s)</span><br><span class="line">    &#123;</span><br><span class="line">    temp+=dis[zj[j]][zj[j+<span class="number">1</span>]];</span><br><span class="line">    ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(vis[j])</span><br><span class="line">     <span class="keyword">continue</span>;</span><br><span class="line">    vis[j]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(diss,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> diss);</span><br><span class="line">    rep(w,i,j)</span><br><span class="line">     rep(k,<span class="number">1</span>,n)</span><br><span class="line">      diss[k]=min(diss[k],dis[zj[w]][k]);</span><br><span class="line">    rep(k,<span class="number">1</span>,n)</span><br><span class="line">     sxy=max(sxy,diss[k]);</span><br><span class="line">    ans=min(ans,sxy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NOIP 2007 TG T4&lt;/p&gt;
    
    </summary>
    
    
      <category term="DFS" scheme="http://www.sxyoi.cn/tags/DFS/"/>
    
      <category term="模拟" scheme="http://www.sxyoi.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="Floyd" scheme="http://www.sxyoi.cn/tags/Floyd/"/>
    
  </entry>
  
  <entry>
    <title>【USACO14FEB】路障Roadblock / luogu P1186 玛丽卡</title>
    <link href="http://www.sxyoi.cn/2018/10/12/%5BUSACO14FEB%5D%E8%B7%AF%E9%9A%9CRoadblock,luogu%20P1186%20%E7%8E%9B%E4%B8%BD%E5%8D%A1/"/>
    <id>http://www.sxyoi.cn/2018/10/12/[USACO14FEB]路障Roadblock,luogu P1186 玛丽卡/</id>
    <published>2018-10-12T06:43:27.000Z</published>
    <updated>2018-10-12T15:29:23.048Z</updated>
    
    <content type="html"><![CDATA[<p>两道几乎相同的题目</p><a id="more"></a><h2>[USACO14FEB]路障Roadblock </h2><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>每天早晨，FJ从家中穿过农场走到牛棚。农场由 N 块农田组成，农田通过 M 条双向道路连接，每条路有一定长度。FJ 的房子在 1 号田，牛棚在 N 号田。没有两块田被多条道路连接，以适当的路径顺序总是能在农场任意一对田间行走。当FJ从一块田走到另一块时，总是以总路长最短的道路顺序来走。</p><p>FJ 的牛呢，总是不安好心，决定干扰他每天早晨的计划。它们在 M 条路的某一条上安放一叠稻草堆，使这条路的长度加倍。牛希望选择一条路干扰使得FJ 从家到牛棚的路长增加最多。它们请你设计并告诉它们最大增量是多少。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第 1 行：两个整数 N, M。</p><p>第 2 到 M+1 行：第 i+1 行包含三个整数 A_i, B_i, L_i，A_i 和 B_i 表示道路 i 连接的田的编号，L_i 表示路长。</p><p></p><strong>输出格式：</strong><br><p></p><p>第 1 行：一个整数，表示通过使某条路加倍而得到的最大增量。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>5 72 1 51 3 13 2 83 5 73 4 32 4 74 5 2</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>2</pre></div></div><h2>说明</h2><p>【样例说明】</p><p>若使 3 和 4 之间的道路长加倍，最短路将由 1-3-4-5 变为 1-3-5。</p><p>【数据规模和约定】</p><p>对于 30%的数据，N &lt;= 70，M &lt;= 1,500。</p><p>对于 100%的数据，1 &lt;= N &lt;= 100，1 &lt;= M &lt;= 5,000，1 &lt;= L_i &lt;= 1,000,000。</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div>---<h2>sol</h2><p>第一次求最短路记录下到n的最短路的总长和前一条边的编号</p><p>然后枚举将上面的边长度扩大二倍之后再求最短路，记录一个其中的到n的最短路的长度的最大值</p><p>最后输出差就好了</p><hr><h2>P1186 玛丽卡 </h2><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>麦克找了个新女朋友，玛丽卡对他非常恼火并伺机报复。</p><p>因为她和他们不住在同一个城市，因此她开始准备她的长途旅行。</p><p>在这个国家中每两个城市之间最多只有一条路相通，并且我们知道从一个城市到另一个城市路上所需花费的时间。</p><p>麦克在车中无意中听到有一条路正在维修，并且那儿正堵车，但没听清楚到底是哪一条路。无论哪一条路正在维修，从玛丽卡所在的城市都能到达麦克所在的城市。</p><p>玛丽卡将只从不堵车的路上通过，并且她将按最短路线行车。麦克希望知道在最糟糕的情况下玛丽卡到达他所在的城市需要多长时间，这样他就能保证他的女朋友离开该城市足够远。</p><p>编写程序，帮助麦克找出玛丽卡按最短路线通过不堵车道路到达他所在城市所需的最长时间(用分钟表示)。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第一行有两个用空格隔开的数$N$和$M$，分别表示城市的数量以及城市间道路的数量。$1≤N≤1000,1≤M≤N \times (N-1)/2$。城市用数字$1-N$标识，麦克在城市$1$中，玛丽卡在城市$N$中。 </p><p>接下来的$M$行中每行包含三个用空格隔开的数$A,B,V$。其中$1≤A,B≤N,1≤V≤1000$。这些数字表示在$A$和城市$B$中间有一条双行道，并且在$V$分钟内是就能通过。</p><p></p><strong>输出格式：</strong><br><p></p><p>一行，写出用分钟表示的最长时间，在这段时间中，无论哪条路在堵车，玛丽卡应该能够到达麦克处，如果少于这个时间的话，则必定存在一条路，该条路一旦堵车，玛丽卡就不能够赶到麦克处。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>5 71 2 81 4 102 3 92 4 102 5 13 4 73 5 10</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>27</pre></div></div>---<h2>sol</h2><p>思路跟上题是一样的，但是这个是直接删边，然后直接输出ans2</p><p>直接把边权赋值为一个较大而又不至于爆int的数就好了，基本上没怎么改程序233</p><hr><h1>Code 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">101</span>],cnt,pre[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">100010</span>],qh,qt,dis[<span class="number">101</span>],ans1,ans2;</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">101</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,next,v;</span><br><span class="line">&#125;e[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].from=from;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">bool</span> sb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">127</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;dis[n]&lt;&lt;'\n';</span></span><br><span class="line">    qh=<span class="number">0</span>;qt=<span class="number">0</span>;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q[qt]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(qh&lt;=qt)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=last[q[qh]];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[q[qh]]+e[temp].v&lt;dis[e[temp].to])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[temp].to]=dis[q[qh]]+e[temp].v;</span><br><span class="line">                <span class="keyword">if</span>(!sb)</span><br><span class="line">                 pre[e[temp].to]=temp;</span><br><span class="line">                <span class="keyword">if</span>(!inq[e[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++qt]=e[temp].to;</span><br><span class="line">                    inq[e[temp].to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=e[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        inq[q[qh]]=<span class="number">0</span>;</span><br><span class="line">        ++qh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!sb)</span><br><span class="line">     ans1=dis[n];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     ans2=max(ans2,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">        add(ty,tx,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa(<span class="number">0</span>);</span><br><span class="line">    tx=pre[n];</span><br><span class="line">    <span class="keyword">while</span>(tx)</span><br><span class="line">    &#123;</span><br><span class="line">        e[tx].v*=<span class="number">2</span>;</span><br><span class="line">        spfa(<span class="number">1</span>);</span><br><span class="line">        e[tx].v/=<span class="number">2</span>;</span><br><span class="line">        tx=pre[e[tx].from];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans2-ans1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Code 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">1001</span>],cnt,pre[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">100010</span>],qh,qt,dis[<span class="number">1001</span>],ans1,ans2;</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">1001</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,next,v;</span><br><span class="line">&#125;e[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].from=from;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">bool</span> sb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">127</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;dis[n]&lt;&lt;'\n';</span></span><br><span class="line">    qh=<span class="number">0</span>;qt=<span class="number">0</span>;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q[qt]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(qh&lt;=qt)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=last[q[qh]];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[q[qh]]+e[temp].v&lt;dis[e[temp].to])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[temp].to]=dis[q[qh]]+e[temp].v;</span><br><span class="line">                <span class="keyword">if</span>(!sb)</span><br><span class="line">                 pre[e[temp].to]=temp;</span><br><span class="line">                <span class="keyword">if</span>(!inq[e[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++qt]=e[temp].to;</span><br><span class="line">                    inq[e[temp].to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=e[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        inq[q[qh]]=<span class="number">0</span>;</span><br><span class="line">        ++qh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!sb)</span><br><span class="line">     ans1=dis[n];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     ans2=max(ans2,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">        add(ty,tx,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa(<span class="number">0</span>);</span><br><span class="line">    tx=pre[n];</span><br><span class="line">    <span class="keyword">while</span>(tx)</span><br><span class="line">    &#123;</span><br><span class="line">        ty=e[tx].v;</span><br><span class="line">        e[tx].v=<span class="number">1147483647</span>;</span><br><span class="line">        spfa(<span class="number">1</span>);</span><br><span class="line">        e[tx].v=ty;</span><br><span class="line">        tx=pre[e[tx].from];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;ans2&lt;&lt;' '&lt;&lt;ans1&lt;&lt;'\n';</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;ans2-ans1;</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两道几乎相同的题目&lt;/p&gt;
    
    </summary>
    
    
      <category term="SPFA" scheme="http://www.sxyoi.cn/tags/SPFA/"/>
    
      <category term="最短路" scheme="http://www.sxyoi.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="枚举" scheme="http://www.sxyoi.cn/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>【USACO08OCT】打井Watering Hole</title>
    <link href="http://www.sxyoi.cn/2018/10/12/%5BUSACO08OCT%5D%E6%89%93%E4%BA%95Watering%20Hole/"/>
    <id>http://www.sxyoi.cn/2018/10/12/[USACO08OCT]打井Watering Hole/</id>
    <published>2018-10-12T03:16:27.000Z</published>
    <updated>2018-10-12T15:28:54.843Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1550" target="_blank" rel="noopener">luogu P1550</a></p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目背景</h2><p>John的农场缺水了！！！</p><h2>题目描述</h2><p>Farmer John has decided to bring water to his N (1 &lt;= N &lt;= 300) pastures which are conveniently numbered 1..N. He may bring water to a pasture either by building a well in that pasture or connecting the pasture via a pipe to another pasture which already has water.</p><p>Digging a well in pasture i costs W_i (1 &lt;= W_i &lt;= 100,000).</p><p>Connecting pastures i and j with a pipe costs P_ij (1 &lt;= P_ij &lt;= 100,000; P_ij = P_ji; P_ii=0).</p><p>Determine the minimum amount Farmer John will have to pay to water all of his pastures.</p><p>POINTS: 400</p><p>农民John 决定将水引入到他的n(1&lt;=n&lt;=300)个牧场。他准备通过挖若</p><p>干井，并在各块田中修筑水道来连通各块田地以供水。在第i 号田中挖一口井需要花费W_i(1&lt;=W_i&lt;=100,000)元。连接i 号田与j 号田需要P_ij (1 &lt;= P_ij &lt;= 100,000 , P_ji=P_ij)元。</p><p>请求出农民John 需要为使所有农场都与有水的农场相连或拥有水井所需要的钱数。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第1 行为一个整数n。</p><p>第2 到n+1 行每行一个整数，从上到下分别为W_1 到W_n。</p><p>第n+2 到2n+1 行为一个矩阵，表示需要的经费（P_ij）。</p><p></p><strong>输出格式：</strong><br><p></p><p>只有一行，为一个整数，表示所需要的钱数。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>454430 2 2 22 0 3 32 3 0 42 3 4 0</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>9</pre></div></div><h2>说明</h2><p>John等着用水，你只有1s时间！！！</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div>---<h2>sol</h2><p>比较显然的贪心+最小生成树</p><p>并查集维护的同时维护一个联通块里挖井的花费最小值，做最小生成树的时候贪心一下</p><p>如果联通（一条边）的花费加上两个联通块里挖井的最小值的较小值小于在两个联通块里挖井的花费最小值之和，那么我们就把它们联通，否则就让他们分别挖井就好了</p><p>一开始sb了，忘了加上这两个的较小值，居然能能过70%？？？</p><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;b)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[<span class="number">301</span>*<span class="number">301</span>];</span><br><span class="line"><span class="keyword">int</span> n,w[<span class="number">301</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">301</span>],minn[<span class="number">301</span>];</span><br><span class="line"><span class="keyword">bool</span> water[<span class="number">301</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x]&lt;<span class="number">0</span>?x:(fa[x]=find(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=find(x);y=find(y);</span><br><span class="line"><span class="keyword">if</span>(fa[x]&gt;fa[y])</span><br><span class="line"> swap(x,y);</span><br><span class="line">fa[x]+=fa[y];</span><br><span class="line">minn[x]=min(minn[x],minn[y]);</span><br><span class="line">fa[y]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].from=from;</span><br><span class="line">e[cnt].to=to;</span><br><span class="line">e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tx,ty;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">n=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> fa[i]=<span class="number">-1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">w[i]=read();</span><br><span class="line">minn[i]=w[i];</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> rep(j,<span class="number">1</span>,n)</span><br><span class="line"> &#123;</span><br><span class="line">tx=read();</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)<span class="comment">//not have to add an edge twice</span></span><br><span class="line"> add(i,j,tx);</span><br><span class="line"> &#125;</span><br><span class="line">sort(e+<span class="number">1</span>,e+cnt+<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,cnt)</span><br><span class="line">&#123;</span><br><span class="line">tx=find(e[i].from);ty=find(e[i].to);</span><br><span class="line"><span class="keyword">if</span>(tx==ty)</span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(min(minn[tx],minn[ty])+e[i].v&lt;=minn[tx]+minn[ty])<span class="comment">//e[i].v&lt;=minn[tx]+minn[ty])</span></span><br><span class="line">&#123;</span><br><span class="line">ans+=e[i].v;</span><br><span class="line">merge(tx,ty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">tx=find(i);</span><br><span class="line"><span class="keyword">if</span>(!water[tx])</span><br><span class="line">&#123;</span><br><span class="line">ans+=minn[tx];</span><br><span class="line">water[tx]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1550&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;luogu P1550&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="贪心" scheme="http://www.sxyoi.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最小生成树" scheme="http://www.sxyoi.cn/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【USACO09NOV】找工就业Job Hunt</title>
    <link href="http://www.sxyoi.cn/2018/10/12/%5BUSACO09NOV%5D%E6%89%BE%E5%B7%A5%E5%B0%B1%E4%B8%9AJob%20Hunt/"/>
    <id>http://www.sxyoi.cn/2018/10/12/[USACO09NOV]找工就业Job Hunt/</id>
    <published>2018-10-12T03:15:27.000Z</published>
    <updated>2018-10-12T15:29:10.720Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1938" target="_blank" rel="noopener">luogu P1938</a></p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>Bessie is running out of money and is searching for jobs. Farmer John knows this and wants the cows to travel around so he has imposed a rule that his cows can only make D (1 &lt;= D &lt;= 1,000) dollars in a city before they must work in another city. Bessie can, however, return to a city after working elsewhere for a while and again earn the D dollars maximum in that city. There is no limit on the number of times Bessie can do this.</p><p>Bessie's world comprises P (1 &lt;= P &lt;= 150) one-way paths connecting C (2 &lt;= C &lt;= 220) cities conveniently numbered 1..C. Bessie is currently in city S (1 &lt;= S &lt;= C). Path i runs one-way from city A_i to city B_i (1 &lt;= A_i &lt;= C; 1 &lt;= B_i &lt;= C) and costs nothing to traverse.</p><p>To help Bessie, Farmer John will give her access to his private jet service. This service features F (1 &lt;= F &lt;= 350) routes, each of which is a one way flight from one city J_i to a another K_i (1 &lt;= J_i &lt;= C; 1 &lt;= K_i &lt;= C) and which costs T_i (1 &lt;= T_i &lt;= 50,000) dollars. Bessie can pay for the tickets from future earnings if she doesn't have the cash on hand.</p><p>Bessie can opt to retire whenever and wherever she wants. Given an unlimited amount of time, what is the most money that Bessie can make presuming she can make the full D dollars in each city she can travel to? Print -1 if there is no limit to this amount.</p><p>奶牛们正在找工作。农场主约翰知道后，鼓励奶牛们四处碰碰运气。而且他还加了一条要求：一头牛在一个城市最多只能赚D（1≤D≤1000）美元，然后它必须到另一座城市工作。当然，它可以在别处工作一阵子后又回到原来的城市再最多赚D美元。而且这样的往返次数没有限制。</p><p>城市间有P（1≤P≤150）条单向路径连接，共有C（2≤C≤220）座城市，编号从1到C。奶牛贝茜当前处在城市S（1≤S≤C）。路径i从城市A_i到城市B_i（1≤A_i≤C，1≤B_i≤C），在路径上行走不用任何花费。</p><p>为了帮助贝茜，约翰让它使用他的私人飞机服务。这项服务有F条（1≤F≤350）单向航线，每条航线是从城市J_i飞到另一座城市K_i（1≤J_i≤C，1≤K_i≤C），费用是T_i（1≤T_i≤50000）美元。如果贝茜手中没有现钱，可以用以后赚的钱来付机票钱。</p><p>贝茜可以选择在任何时候，在任何城市退休。如果在工作时间上不做限制，贝茜总共可以赚多少钱呢？如果赚的钱也不会出现限制，就输出-1。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第一行：5个用空格分开的整数D，P，C，F，S。</p><p>第2到第P+1行：第i+1行包含2个用空格分开的整数，表示一条从城市A_i到城市B_i的单向路径。</p><p>接下来F行，每行3个用空格分开的整数，表示一条从城市J_i到城市K_i的单向航线，费用是T_i。</p><p></p><strong>输出格式：</strong><br><p></p><p>一个整数，在上述规则下最多可以赚到的钱数。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>100 3 5 2 11 52 31 45 2 1502 5 120</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>250</pre></div></div><h2>说明</h2><p>This world has five cities, three paths and two jet routes. Bessie starts out in city 1, and she can only make 100 dollars in each city before moving on.</p><p>Bessie can travel from city 1 to city 5 to city 2 to city 3, and make a total of 4*100 - 150 = 250 dollars.</p><p>Source: USACO 2009 November Silver</p><p>这个世界上有五个城市，三条单向路径和两条单向航线。贝茜从一号城市开始她的旅行，她在离开一个城市前最多只能在这个城市赚100美元。</p><p>贝茜可以通过从一号城市--&gt;五号城市--&gt;二号城市--&gt;三号城市的旅行赚到4*100-150=250美元。</p><p>(注:在四个城市各赚100美元,从五号城市飞到二号城市花掉150美元)</p><p>来源:USACO 2009 十一月银组</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div>---<h2>sol</h2><p>直接建图spfa最长路，再加个判正环（虽然数据里好像并没有输出-1的点）</p><p>好久没打spfa了。。。居然打错了好几次。。。总结一下错误：</p><pre><code>忘了出队出队的时候忘了去掉在队列中的标记忘了切到下一条边（指邻接链表）答案初始化错了orz读入优化居然把&amp;&amp;写成了||</code></pre><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> d,p,c,f,s;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">300</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> incnt[<span class="number">300</span>],q[<span class="number">100000</span>],qh,qt,dis[<span class="number">300</span>];<span class="comment">//in_queue_count , queue , q_head , q_tail , dis</span></span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">300</span>]; <span class="comment">// judge if it is in queue</span></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sb=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;'a';</span></span><br><span class="line">    d=read();p=read();c=read();f=read();s=read();</span><br><span class="line">    <span class="comment">//cout&lt;&lt;d&lt;&lt;' '&lt;&lt;p&lt;&lt;' '&lt;&lt;c&lt;&lt;' '&lt;&lt;f&lt;&lt;' '&lt;&lt;s&lt;&lt;'\n';</span></span><br><span class="line">    ans=d;</span><br><span class="line">    rep(i,<span class="number">1</span>,c)</span><br><span class="line">     dis[i]=<span class="number">-2000000000</span>;</span><br><span class="line">    dis[s]=d;</span><br><span class="line">    rep(i,<span class="number">1</span>,p)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,f)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    q[qt]=s;</span><br><span class="line">    <span class="keyword">while</span>(qh&lt;=qt)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=last[q[qh]];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[q[qh]]-e[temp].v+d&gt;dis[e[temp].to])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[temp].to]=dis[q[qh]]-e[temp].v+d;</span><br><span class="line">                ans=max(ans,dis[e[temp].to]);</span><br><span class="line">                <span class="keyword">if</span>(!inq[e[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    incnt[e[temp].to]++;</span><br><span class="line">                    q[++qt]=e[temp].to;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(incnt[e[temp].to]&gt;=c+<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    sb=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=e[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sb)</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">        inq[q[qh]]=<span class="number">0</span>;</span><br><span class="line">        ++qh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sb)</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1938&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;luogu P1938&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="SPFA" scheme="http://www.sxyoi.cn/tags/SPFA/"/>
    
  </entry>
  
  <entry>
    <title>婆罗门的辣鸡问题解题报告</title>
    <link href="http://www.sxyoi.cn/2018/10/12/%E5%A9%86%E7%BD%97%E9%97%A8%E7%9A%84%E8%BE%A3%E9%B8%A1%E9%97%AE%E9%A2%98%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://www.sxyoi.cn/2018/10/12/婆罗门的辣鸡问题解题报告/</id>
    <published>2018-10-11T16:10:27.000Z</published>
    <updated>2018-10-11T16:31:34.639Z</updated>
    
    <content type="html"><![CDATA[<p>总体来说还算可以的一套题。。。</p><a id="more"></a><p>难度貌似有点倒序？</p><h2>婆罗门的山区火箭运输</h2><p>这题实际上相当于货车运输的高度弱化版。。。</p><p>看到最大值最小就想到了二分答案。。。但是二分答案的验证复杂度不稳定。。。</p><p>最坏大概是O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mi>m</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{nm}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.664392em;"></span><span class="strut bottom" style="height:0.664392em;vertical-align:0em;"></span><span class="base"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">n</span><span class="mord mathit mtight">m</span></span></span></span></span></span></span></span></span></span></span></span>log max{<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">w_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span></span></span></span>}-min{<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">w_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span></span></span></span>})</p><p>并不能稳过</p><p>而转化成货车运输的思路，操作比那要简单得多</p><p>先建图，把点权差的绝对值当做边权</p><p>因为只需要求出（1,1）到（n,m）的所有路径中最小值最大的那个最小的最大值</p><p>所以就可以做一颗最小生成树</p><p>而且只需要加边到让(1,1)和(n,m)联通即可，然后不断更新ans</p><p>显然是正确的</p><p>复杂度O(nm log nm) （忽略了并查集、建图和读入。。。）</p><p>但是我空间开小了。。。然后就炸了4个点qwq，开了两倍空间就可以a了</p><p>1.5s就能卡掉了二分答案。。。1s可以卡个常数，需要读入优化+一些简单卡常操作。。。</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;b)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[MAXN*MAXN*<span class="number">2</span>];<span class="comment">//12MB*2</span></span><br><span class="line"><span class="keyword">int</span> w[MAXN+<span class="number">1</span>][MAXN+<span class="number">1</span>],n,m,cnt,fa[MAXN*MAXN*<span class="number">2</span>];<span class="comment">//less than 12 MB*2</span></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].from=from;</span><br><span class="line">e[cnt].to=to;</span><br><span class="line">e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//union -&gt; find</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x]?(fa[x]=find(fa[x])):x;<span class="comment">//lu jing ya suo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//union -&gt; merge</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=find(x);y=find(y);</span><br><span class="line">fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"mountain.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"mountain.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span> fa);</span><br><span class="line"><span class="keyword">int</span> tempa,tempb;</span><br><span class="line">n=read();m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> rep(j,<span class="number">1</span>,m)</span><br><span class="line">  w[i][j]=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="comment">//build the map , add edge one by one</span></span><br><span class="line">&#123;</span><br><span class="line">rep(j,<span class="number">1</span>,m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if(i==1&amp;&amp;j==1)</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;i*m+j&lt;&lt;' '&lt;&lt;1*m+1&lt;&lt;'\n';</span></span><br><span class="line"><span class="comment">//if(i==n&amp;&amp;j==m)</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;i*m+j&lt;&lt;' '&lt;&lt;n*m+m&lt;&lt;'\n';</span></span><br><span class="line"><span class="keyword">if</span>(i!=n)<span class="comment">//if(i&lt;n)</span></span><br><span class="line"> add(i*m+j,(i+<span class="number">1</span>)*m+j,<span class="built_in">abs</span>(w[i][j]-w[i+<span class="number">1</span>][j]));</span><br><span class="line"><span class="keyword">if</span>(j!=m)<span class="comment">//if(j&lt;m)</span></span><br><span class="line"> add(i*m+j,i*m+j+<span class="number">1</span>,<span class="built_in">abs</span>(w[i][j]-w[i][j+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(e+<span class="number">1</span>,e+cnt+<span class="number">1</span>);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,cnt)<span class="comment">//kruskal , only need to let (1,1) and (n,m) are accessable each other</span></span><br><span class="line">&#123;</span><br><span class="line">tempa=find(e[i].from);tempb=find(e[i].to);</span><br><span class="line"><span class="keyword">if</span>(tempa==tempb)</span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line">merge(tempa,tempb);</span><br><span class="line">ans=max(ans,e[i].v);</span><br><span class="line"><span class="keyword">if</span>(find(<span class="number">1</span>*m+<span class="number">1</span>)==find(n*m+m))</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">fclose(<span class="built_in">stdin</span>);</span><br><span class="line">fclose(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>婆罗门的井字棋</h2><p>就是模拟。。。没什么好说的。。。</p><p>直接暴力判断，人工能写出来所有判断情况，应该就不会T了。。。</p><p>但是是真的考验耐心。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mapp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">bool</span> usedp[<span class="number">27</span>],usedt[<span class="number">27</span>][<span class="number">27</span>];<span class="comment">//used_person , used_team</span></span><br><span class="line"><span class="keyword">int</span> ansp,anst;<span class="comment">//ans_person , ans_team</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ansp=<span class="number">0</span>;anst=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(usedp,<span class="number">0</span>,<span class="keyword">sizeof</span> usedp);</span><br><span class="line"><span class="built_in">memset</span>(usedt,<span class="number">0</span>,<span class="keyword">sizeof</span> usedt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"count.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"count.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">init();</span><br><span class="line">ansp=<span class="number">0</span>;anst=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"> rep(j,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"> mapp[i][j]=(c-<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">3</span>)<span class="comment">//judge hang</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mapp[i][<span class="number">1</span>]==mapp[i][<span class="number">2</span>]&amp;&amp;mapp[i][<span class="number">2</span>]==mapp[i][<span class="number">3</span>])<span class="comment">//person win</span></span><br><span class="line"> <span class="keyword">if</span>(!usedp[mapp[i][<span class="number">1</span>]])</span><br><span class="line"> &#123;</span><br><span class="line"> usedp[mapp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line"> ++ansp;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[i][<span class="number">1</span>]==mapp[i][<span class="number">2</span>]&amp;&amp;mapp[i][<span class="number">2</span>]!=mapp[i][<span class="number">3</span>])<span class="comment">//left two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">3</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[i][<span class="number">3</span>]][mapp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[i][<span class="number">1</span>]==mapp[i][<span class="number">3</span>]&amp;&amp;mapp[i][<span class="number">2</span>]!=mapp[i][<span class="number">3</span>])<span class="comment">//two points</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[i][<span class="number">2</span>]][mapp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[i][<span class="number">2</span>]==mapp[i][<span class="number">3</span>]&amp;&amp;mapp[i][<span class="number">1</span>]!=mapp[i][<span class="number">2</span>])<span class="comment">//right two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[i][<span class="number">2</span>]][mapp[i][<span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[i][<span class="number">2</span>]][mapp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(j,<span class="number">1</span>,<span class="number">3</span>)<span class="comment">//judge lie</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][j]==mapp[<span class="number">2</span>][j]&amp;&amp;mapp[<span class="number">2</span>][j]==mapp[<span class="number">3</span>][j])<span class="comment">//person win</span></span><br><span class="line"> <span class="keyword">if</span>(!usedp[mapp[<span class="number">1</span>][j]])</span><br><span class="line"> &#123;</span><br><span class="line"> ++ansp;</span><br><span class="line"> usedp[mapp[<span class="number">1</span>][j]]=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][j]==mapp[<span class="number">2</span>][j]&amp;&amp;mapp[<span class="number">2</span>][j]!=mapp[<span class="number">3</span>][j])<span class="comment">//up two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">3</span>][j]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">3</span>][j]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">3</span>][j]][mapp[<span class="number">2</span>][j]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][j]==mapp[<span class="number">3</span>][j]&amp;&amp;mapp[<span class="number">2</span>][j]!=mapp[<span class="number">3</span>][j])<span class="comment">//two points</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">3</span>][j]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">3</span>][j]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">3</span>][j]][mapp[<span class="number">2</span>][j]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">2</span>][j]==mapp[<span class="number">3</span>][j]&amp;&amp;mapp[<span class="number">1</span>][j]!=mapp[<span class="number">2</span>][j])<span class="comment">//down two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][j]][mapp[<span class="number">2</span>][j]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][j]][mapp[<span class="number">2</span>][j]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">1</span>][j]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//judge dui jiao xian</span></span><br><span class="line"><span class="comment">//left-&gt;right</span></span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">1</span>]==mapp[<span class="number">2</span>][<span class="number">2</span>]&amp;&amp;mapp[<span class="number">2</span>][<span class="number">2</span>]==mapp[<span class="number">3</span>][<span class="number">3</span>])<span class="comment">//person win</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedp[mapp[<span class="number">1</span>][<span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedp[mapp[<span class="number">1</span>][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">ansp++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">1</span>]==mapp[<span class="number">2</span>][<span class="number">2</span>]&amp;&amp;mapp[<span class="number">2</span>][<span class="number">2</span>]!=mapp[<span class="number">3</span>][<span class="number">3</span>])<span class="comment">//up two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">3</span>][<span class="number">3</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">3</span>][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">3</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">1</span>]==mapp[<span class="number">3</span>][<span class="number">3</span>]&amp;&amp;mapp[<span class="number">1</span>][<span class="number">1</span>]!=mapp[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">//two points</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">1</span>][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">2</span>][<span class="number">2</span>]==mapp[<span class="number">3</span>][<span class="number">3</span>]&amp;&amp;mapp[<span class="number">1</span>][<span class="number">1</span>]!=mapp[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">//down two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">1</span>][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//right-&gt;left</span></span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">3</span>]==mapp[<span class="number">2</span>][<span class="number">2</span>]&amp;&amp;mapp[<span class="number">2</span>][<span class="number">2</span>]==mapp[<span class="number">3</span>][<span class="number">1</span>])<span class="comment">//person win</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedp[mapp[<span class="number">1</span>][<span class="number">3</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedp[mapp[<span class="number">1</span>][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">ansp++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">3</span>]==mapp[<span class="number">2</span>][<span class="number">2</span>]&amp;&amp;mapp[<span class="number">2</span>][<span class="number">2</span>]!=mapp[<span class="number">3</span>][<span class="number">1</span>])<span class="comment">//up two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">3</span>][<span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">3</span>][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">3</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">3</span>]==mapp[<span class="number">3</span>][<span class="number">1</span>]&amp;&amp;mapp[<span class="number">1</span>][<span class="number">3</span>]!=mapp[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">//two points</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">1</span>][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">2</span>][<span class="number">2</span>]==mapp[<span class="number">3</span>][<span class="number">1</span>]&amp;&amp;mapp[<span class="number">1</span>][<span class="number">3</span>]!=mapp[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">//down two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">1</span>][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>,ansp,anst);</span><br><span class="line">fclose(<span class="built_in">stdin</span>);</span><br><span class="line">fclose(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>婆罗门的城市斗鸡</h2><p>这题数据水了，最大的N其实只有不到6000，应该O(N^2)也能过，但是不开long long就没救了</p><p>正解是O(N log N)的排序和O(N)的计算</p><p>考虑一下两个点中间夹着一个点，这两个点的距离其实可以拆分成前面的点和中间的点的距离以及后面的点和中间的点的距离</p><p>然后考虑每个点和它的后一个点的贡献，比如x和x+1，他们的距离包含在了x * (n-x)对里，也就是他们的距离在答案中出现了x * (n-x)次，直接加上这个数，每个点都这么做</p><p>最后算出来是一半的，然后 * 2就ok了</p><p>记得开long long</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> pos[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"chicken.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"chicken.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> pos[i]=read();</span><br><span class="line">sort(pos+<span class="number">1</span>,pos+n+<span class="number">1</span>);</span><br><span class="line">--n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> ans+=(<span class="keyword">long</span> <span class="keyword">long</span>)(((<span class="keyword">long</span> <span class="keyword">long</span>)i)*(<span class="keyword">long</span> <span class="keyword">long</span>)(n+<span class="number">1</span>-i)*(pos[i+<span class="number">1</span>]-pos[i]));</span><br><span class="line">ans=(<span class="keyword">long</span> <span class="keyword">long</span>)(ans*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">fclose(<span class="built_in">stdin</span>);</span><br><span class="line">fclose(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>测试题目：</p><p>链接：<a href="https://pan.baidu.com/s/1fG4u5aqBIp-LBShIUszgfw" target="_blank" rel="noopener">https://pan.baidu.com/s/1fG4u5aqBIp-LBShIUszgfw</a><br>提取码：g2js</p><p>评测环境lemon，已配置好，请放心食用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总体来说还算可以的一套题。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="模拟" scheme="http://www.sxyoi.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最小生成树" scheme="http://www.sxyoi.cn/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="数学" scheme="http://www.sxyoi.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>bzoj 2456 mode</title>
    <link href="http://www.sxyoi.cn/2018/10/10/bzoj%202456%20mode/"/>
    <id>http://www.sxyoi.cn/2018/10/10/bzoj 2456 mode/</id>
    <published>2018-10-10T11:12:27.000Z</published>
    <updated>2018-10-10T14:35:25.993Z</updated>
    
    <content type="html"><![CDATA[<p>神奇的解法。。。</p><a id="more"></a><title>Problem 2456. -- mode</title><center><h2>2456: mode</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>1 MB<br><span class="green">Submit: </span>7662&nbsp;&nbsp;<span class="green">Solved: </span>2932<br>[<a href="submitpage.php?id=2456">Submit</a>][<a href="problemstatus.php?id=2456">Status</a>][<a href="bbs.php?id=2456">Discuss</a>]</center><h2>Description</h2><div class="content"><p>给你一个n个数的数列，其中某个数出现了超过n div 2次即众数，请你找出那个数。</p></div><h2>Input</h2><div class="content"><p>第1行一个正整数n。<br></p><p>第2行n个正整数用空格隔开。</p><h2>Output</h2><p>&nbsp;&nbsp;&nbsp; 一行一个正整数表示那个众数。</p></div><h2>Sample Input</h2>5<p>3 2 3 1 3</p><h2>Sample Output</h2><pre><code>&lt;div class=content&gt;&lt;span class=sampledata&gt;3&lt;br /&gt;</code></pre><p></p><h2>HINT</h2><br><div class="content"><p></p><p>100%的数据，n&lt;=500000，数列中每个数&lt;=maxlongint。</p><br><p></p><p></p><br><hr><h2>sol</h2><p>一开始以为离散化+sort，结果空间只有1MB</p><p>然后看了题解</p><p>先是题里对众数的定义，出现次数超过n/2的数</p><p>也就是说只可能有一个众数</p><p>然后用的这种算法好像是把不是众数的数撞掉</p><p>具体可以看代码，真的短。。。</p><p>不知道为什么现在写代码会犯很多sb错误orz，感觉脑子不是很好使了…</p><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x=<span class="number">-1</span>,sb;</span><br><span class="line"><span class="keyword">int</span> n,tag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sb);</span><br><span class="line"><span class="keyword">if</span>(sb==x)</span><br><span class="line"> tag+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> tag-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tag&lt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=sb;</span><br><span class="line">tag=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;神奇的解法。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="模拟" scheme="http://www.sxyoi.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="数学" scheme="http://www.sxyoi.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="神奇操作" scheme="http://www.sxyoi.cn/tags/%E7%A5%9E%E5%A5%87%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>P3916 图的遍历</title>
    <link href="http://www.sxyoi.cn/2018/10/10/P3916%20%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>http://www.sxyoi.cn/2018/10/10/P3916 图的遍历/</id>
    <published>2018-10-10T11:12:27.000Z</published>
    <updated>2018-10-10T14:36:39.872Z</updated>
    
    <content type="html"><![CDATA[<p>一道图论题</p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>给出$N$个点，$M$条边的有向图，对于每个点$v$，求$A(v)$表示从点$v$出发，能到达的编号最大的点。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第1 行，2 个整数$N,M$。</p><p>接下来$M$行，每行2个整数$U_i,V_i$，表示边$(U_i,V_i)$。点用$1, 2,\cdots,N$编号。</p><p></p><strong>输出格式：</strong><br><p></p><p>N 个整数$A(1),A(2),\cdots,A(N)$。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 31 22 44 3</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 4 3 4</pre></div></div><h2>说明</h2><p>• 对于60% 的数据，$1 \le N . K \le 10^3$；</p><p>• 对于100% 的数据，$1 \le N , M \le 10^5$。</p></div><hr><h1>sol</h1><p>看到这题第一眼：</p><p>记忆化，直接搜</p><p>然后就WA了</p><p>大概能知道某种环可以卡掉，但是不知道怎么构造以及为什么</p><p>其实是因为后搜到的没办法更新了</p><p>比如这组数据(感谢<a href="sxyugao.top">@sxyugao</a>大佬提供的hack数据，原题hack数据太大了。。。)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 3</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><p>所以我们反着建图，记录大的点能到哪些小的点（也就是原图小的点能到哪些大的点），从大的开始搜索，就不会存在这样的问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>],last[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">const</span> <span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x])</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">a[x]=st;</span><br><span class="line"><span class="keyword">int</span> temp=last[x];</span><br><span class="line"><span class="keyword">while</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line">dfs(e[temp].to,st);</span><br><span class="line">temp=e[temp].next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].to=from;</span><br><span class="line">e[cnt].next=last[to];</span><br><span class="line">last[to]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tx,ty;</span><br><span class="line">n=read();m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,m)</span><br><span class="line">&#123;</span><br><span class="line">tx=read();ty=read();</span><br><span class="line">add(tx,ty);</span><br><span class="line">&#125;</span><br><span class="line">per(i,n,<span class="number">1</span>)</span><br><span class="line"> dfs(i,i);</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3>题外话</h3><p>图论的题还是比较玄学啊orz</p><p>不知道要怎么练习这种东西</p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一道图论题&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="记忆化搜索" scheme="http://www.sxyoi.cn/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>CF437C The Child and Toy</title>
    <link href="http://www.sxyoi.cn/2018/10/10/CF437C%20The%20Child%20and%20Toy/"/>
    <id>http://www.sxyoi.cn/2018/10/10/CF437C The Child and Toy/</id>
    <published>2018-10-10T09:06:27.000Z</published>
    <updated>2018-10-10T14:35:49.951Z</updated>
    
    <content type="html"><![CDATA[<p>贪心，神仙图论</p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题意翻译</h2><p>n个带权点，m条无向边，删除一个点就要付出所有与之有联系且没有被删除的点的点权之和的代价。</p><p>求删除所有点的最小代价。</p><h2>题目描述</h2><p>On Children's Day, the child got a toy from Delayyy as a present. However, the child is so naughty that he can't wait to destroy the toy.</p><p>The toy consists of $ n $ parts and $ m $ ropes. Each rope links two parts, but every pair of parts is linked by at most one rope. To split the toy, the child must remove all its parts. The child can remove a single part at a time, and each remove consume an energy. Let's define an energy value of part $ i $ as $ v_{i} $ . The child spend $ v_{f1}+v_{f2}+...+v_{fk} $ energy for removing part $ i $ where $ f_{1},f_{2},...,f_{k} $ are the parts that are directly connected to the $ i $ -th and haven't been removed.</p><p>Help the child to find out, what is the minimum total energy he should spend to remove all $ n $ parts.</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>The first line contains two integers $ n $ and $ m $ ( $ 1&lt;=n&lt;=1000 $ ; $ 0&lt;=m&lt;=2000 $ ). The second line contains $ n $ integers: $ v_{1},v_{2},...,v_{n} $ ( $ 0&lt;=v_{i}&lt;=10^{5} $ ). Then followed $ m $ lines, each line contains two integers $ x_{i} $ and $ y_{i} $ , representing a rope from part $ x_{i} $ to part $ y_{i} $ ( $ 1&lt;=x_{i},y_{i}&lt;=n; x_{i}≠y_{i} $ ).</p><p>Consider all the parts are numbered from $ 1 $ to $ n $ .</p><p></p><strong>输出格式：</strong><br><p></p><p>Output the minimum total energy the child should spend to remove all $ n $ parts of the toy.</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 310 20 30 401 41 22 3</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>40</pre></div></div><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#2：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 4100 100 100 1001 22 32 43 4</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#2：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>400</pre></div></div><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#3：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>7 1040 10 20 10 20 80 401 54 74 55 25 76 41 61 34 31 4</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#3：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>160</pre></div></div><h2>说明</h2><p>One of the optimal sequence of actions in the first sample is:</p><ul><li>First, remove part $ 3 $ , cost of the action is $ 20 $ .</li><li>Then, remove part $ 2 $ , cost of the action is $ 10 $ .</li><li>Next, remove part $ 4 $ , cost of the action is $ 10 $ .</li><li>At last, remove part $ 1 $ , cost of the action is $ 0 $ .</li></ul><p>So the total energy the child paid is $ 20+10+10+0=40 $ , which is the minimum.</p><p>In the second sample, the child will spend $ 400 $ no matter in what order he will remove the parts.</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div><hr><h1>sol</h1><p>首先有个比较显然的贪心</p><p>每个点再记录与之相连的未被删除的点的点权之和</p><p>然后每次删除最小，并处理与之相连的点，重新排序</p><p>这样复杂度大概是O(n(n log n + m))</p><p>好像也能过？</p><p>但是还有更好的做法：</p><p>我们考虑这些点，删点之后，与之相连的边就都会消失</p><p>所以删点&lt;=&gt;删边</p><p>而每一条边的贡献就是其两端的点的权值min</p><p>这个东西我并不会证明。。。但是看了几组确实是这样</p><p>看了课件才知道这个做法。。。神仙图论。。。</p><p>这样的复杂度是O(n+m)</p><p>黄学长的课件是这么写的</p><pre><code>按照从⼤到小的次序删点。发现每条边的贡献是连接的两个点的权值的最小</code></pre><p>orzzzzzzzzzzzzz</p><hr><h1>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,w[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tx,ty;</span><br><span class="line">n=read();m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> w[i]=read();</span><br><span class="line">rep(j,<span class="number">1</span>,m)</span><br><span class="line">&#123;</span><br><span class="line">tx=read();ty=read();</span><br><span class="line">ans+=min(w[tx],w[ty]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;贪心，神仙图论&lt;/p&gt;
    
    </summary>
    
    
      <category term="贪心" scheme="http://www.sxyoi.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="图论" scheme="http://www.sxyoi.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
</feed>
