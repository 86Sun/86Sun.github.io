<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>【USACO14FEB】路障Roadblock / luogu P1186 玛丽卡</title>
      <link href="/2018/10/12/%5BUSACO14FEB%5D%E8%B7%AF%E9%9A%9CRoadblock,luogu%20P1186%20%E7%8E%9B%E4%B8%BD%E5%8D%A1/"/>
      <url>/2018/10/12/%5BUSACO14FEB%5D%E8%B7%AF%E9%9A%9CRoadblock,luogu%20P1186%20%E7%8E%9B%E4%B8%BD%E5%8D%A1/</url>
      <content type="html"><![CDATA[<p>两道几乎相同的题目</p><a id="more"></a><h2>[USACO14FEB]路障Roadblock </h2><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>每天早晨，FJ从家中穿过农场走到牛棚。农场由 N 块农田组成，农田通过 M 条双向道路连接，每条路有一定长度。FJ 的房子在 1 号田，牛棚在 N 号田。没有两块田被多条道路连接，以适当的路径顺序总是能在农场任意一对田间行走。当FJ从一块田走到另一块时，总是以总路长最短的道路顺序来走。</p><p>FJ 的牛呢，总是不安好心，决定干扰他每天早晨的计划。它们在 M 条路的某一条上安放一叠稻草堆，使这条路的长度加倍。牛希望选择一条路干扰使得FJ 从家到牛棚的路长增加最多。它们请你设计并告诉它们最大增量是多少。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第 1 行：两个整数 N, M。</p><p>第 2 到 M+1 行：第 i+1 行包含三个整数 A_i, B_i, L_i，A_i 和 B_i 表示道路 i 连接的田的编号，L_i 表示路长。</p><p></p><strong>输出格式：</strong><br><p></p><p>第 1 行：一个整数，表示通过使某条路加倍而得到的最大增量。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>5 72 1 51 3 13 2 83 5 73 4 32 4 74 5 2</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>2</pre></div></div><h2>说明</h2><p>【样例说明】</p><p>若使 3 和 4 之间的道路长加倍，最短路将由 1-3-4-5 变为 1-3-5。</p><p>【数据规模和约定】</p><p>对于 30%的数据，N &lt;= 70，M &lt;= 1,500。</p><p>对于 100%的数据，1 &lt;= N &lt;= 100，1 &lt;= M &lt;= 5,000，1 &lt;= L_i &lt;= 1,000,000。</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div>---<h2>sol</h2><p>第一次求最短路记录下到n的最短路的总长和前一条边的编号</p><p>然后枚举将上面的边长度扩大二倍之后再求最短路，记录一个其中的到n的最短路的长度的最大值</p><p>最后输出差就好了</p><hr><h2>P1186 玛丽卡 </h2><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>麦克找了个新女朋友，玛丽卡对他非常恼火并伺机报复。</p><p>因为她和他们不住在同一个城市，因此她开始准备她的长途旅行。</p><p>在这个国家中每两个城市之间最多只有一条路相通，并且我们知道从一个城市到另一个城市路上所需花费的时间。</p><p>麦克在车中无意中听到有一条路正在维修，并且那儿正堵车，但没听清楚到底是哪一条路。无论哪一条路正在维修，从玛丽卡所在的城市都能到达麦克所在的城市。</p><p>玛丽卡将只从不堵车的路上通过，并且她将按最短路线行车。麦克希望知道在最糟糕的情况下玛丽卡到达他所在的城市需要多长时间，这样他就能保证他的女朋友离开该城市足够远。</p><p>编写程序，帮助麦克找出玛丽卡按最短路线通过不堵车道路到达他所在城市所需的最长时间(用分钟表示)。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第一行有两个用空格隔开的数$N$和$M$，分别表示城市的数量以及城市间道路的数量。$1≤N≤1000,1≤M≤N \times (N-1)/2$。城市用数字$1-N$标识，麦克在城市$1$中，玛丽卡在城市$N$中。 </p><p>接下来的$M$行中每行包含三个用空格隔开的数$A,B,V$。其中$1≤A,B≤N,1≤V≤1000$。这些数字表示在$A$和城市$B$中间有一条双行道，并且在$V$分钟内是就能通过。</p><p></p><strong>输出格式：</strong><br><p></p><p>一行，写出用分钟表示的最长时间，在这段时间中，无论哪条路在堵车，玛丽卡应该能够到达麦克处，如果少于这个时间的话，则必定存在一条路，该条路一旦堵车，玛丽卡就不能够赶到麦克处。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>5 71 2 81 4 102 3 92 4 102 5 13 4 73 5 10</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>27</pre></div></div>---<h2>sol</h2><p>思路跟上题是一样的，但是这个是直接删边，然后直接输出ans2</p><p>直接把边权赋值为一个较大而又不至于爆int的数就好了，基本上没怎么改程序233</p><hr><h1>Code 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">101</span>],cnt,pre[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">100010</span>],qh,qt,dis[<span class="number">101</span>],ans1,ans2;</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">101</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,next,v;</span><br><span class="line">&#125;e[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].from=from;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">bool</span> sb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">127</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;dis[n]&lt;&lt;'\n';</span></span><br><span class="line">    qh=<span class="number">0</span>;qt=<span class="number">0</span>;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q[qt]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(qh&lt;=qt)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=last[q[qh]];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[q[qh]]+e[temp].v&lt;dis[e[temp].to])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[temp].to]=dis[q[qh]]+e[temp].v;</span><br><span class="line">                <span class="keyword">if</span>(!sb)</span><br><span class="line">                 pre[e[temp].to]=temp;</span><br><span class="line">                <span class="keyword">if</span>(!inq[e[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++qt]=e[temp].to;</span><br><span class="line">                    inq[e[temp].to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=e[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        inq[q[qh]]=<span class="number">0</span>;</span><br><span class="line">        ++qh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!sb)</span><br><span class="line">     ans1=dis[n];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     ans2=max(ans2,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">        add(ty,tx,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa(<span class="number">0</span>);</span><br><span class="line">    tx=pre[n];</span><br><span class="line">    <span class="keyword">while</span>(tx)</span><br><span class="line">    &#123;</span><br><span class="line">        e[tx].v*=<span class="number">2</span>;</span><br><span class="line">        spfa(<span class="number">1</span>);</span><br><span class="line">        e[tx].v/=<span class="number">2</span>;</span><br><span class="line">        tx=pre[e[tx].from];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans2-ans1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Code 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">1001</span>],cnt,pre[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">100010</span>],qh,qt,dis[<span class="number">1001</span>],ans1,ans2;</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">1001</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,next,v;</span><br><span class="line">&#125;e[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].from=from;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">bool</span> sb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">127</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;dis[n]&lt;&lt;'\n';</span></span><br><span class="line">    qh=<span class="number">0</span>;qt=<span class="number">0</span>;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q[qt]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(qh&lt;=qt)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=last[q[qh]];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[q[qh]]+e[temp].v&lt;dis[e[temp].to])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[temp].to]=dis[q[qh]]+e[temp].v;</span><br><span class="line">                <span class="keyword">if</span>(!sb)</span><br><span class="line">                 pre[e[temp].to]=temp;</span><br><span class="line">                <span class="keyword">if</span>(!inq[e[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++qt]=e[temp].to;</span><br><span class="line">                    inq[e[temp].to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=e[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        inq[q[qh]]=<span class="number">0</span>;</span><br><span class="line">        ++qh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!sb)</span><br><span class="line">     ans1=dis[n];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     ans2=max(ans2,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">        add(ty,tx,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa(<span class="number">0</span>);</span><br><span class="line">    tx=pre[n];</span><br><span class="line">    <span class="keyword">while</span>(tx)</span><br><span class="line">    &#123;</span><br><span class="line">        ty=e[tx].v;</span><br><span class="line">        e[tx].v=<span class="number">1147483647</span>;</span><br><span class="line">        spfa(<span class="number">1</span>);</span><br><span class="line">        e[tx].v=ty;</span><br><span class="line">        tx=pre[e[tx].from];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;ans2&lt;&lt;' '&lt;&lt;ans1&lt;&lt;'\n';</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;ans2-ans1;</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
        <tags>
            
            <tag> SPFA </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【USACO08OCT】打井Watering Hole</title>
      <link href="/2018/10/12/%5BUSACO08OCT%5D%E6%89%93%E4%BA%95Watering%20Hole/"/>
      <url>/2018/10/12/%5BUSACO08OCT%5D%E6%89%93%E4%BA%95Watering%20Hole/</url>
      <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1550" target="_blank" rel="noopener">luogu P1550</a></p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目背景</h2><p>John的农场缺水了！！！</p><h2>题目描述</h2><p>Farmer John has decided to bring water to his N (1 &lt;= N &lt;= 300) pastures which are conveniently numbered 1..N. He may bring water to a pasture either by building a well in that pasture or connecting the pasture via a pipe to another pasture which already has water.</p><p>Digging a well in pasture i costs W_i (1 &lt;= W_i &lt;= 100,000).</p><p>Connecting pastures i and j with a pipe costs P_ij (1 &lt;= P_ij &lt;= 100,000; P_ij = P_ji; P_ii=0).</p><p>Determine the minimum amount Farmer John will have to pay to water all of his pastures.</p><p>POINTS: 400</p><p>农民John 决定将水引入到他的n(1&lt;=n&lt;=300)个牧场。他准备通过挖若</p><p>干井，并在各块田中修筑水道来连通各块田地以供水。在第i 号田中挖一口井需要花费W_i(1&lt;=W_i&lt;=100,000)元。连接i 号田与j 号田需要P_ij (1 &lt;= P_ij &lt;= 100,000 , P_ji=P_ij)元。</p><p>请求出农民John 需要为使所有农场都与有水的农场相连或拥有水井所需要的钱数。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第1 行为一个整数n。</p><p>第2 到n+1 行每行一个整数，从上到下分别为W_1 到W_n。</p><p>第n+2 到2n+1 行为一个矩阵，表示需要的经费（P_ij）。</p><p></p><strong>输出格式：</strong><br><p></p><p>只有一行，为一个整数，表示所需要的钱数。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>454430 2 2 22 0 3 32 3 0 42 3 4 0</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>9</pre></div></div><h2>说明</h2><p>John等着用水，你只有1s时间！！！</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div>---<h2>sol</h2><p>比较显然的贪心+最小生成树</p><p>并查集维护的同时维护一个联通块里挖井的花费最小值，做最小生成树的时候贪心一下</p><p>如果联通（一条边）的花费加上两个联通块里挖井的最小值的较小值小于在两个联通块里挖井的花费最小值之和，那么我们就把它们联通，否则就让他们分别挖井就好了</p><p>一开始sb了，忘了加上这两个的较小值，居然能能过70%？？？</p><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;b)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[<span class="number">301</span>*<span class="number">301</span>];</span><br><span class="line"><span class="keyword">int</span> n,w[<span class="number">301</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">301</span>],minn[<span class="number">301</span>];</span><br><span class="line"><span class="keyword">bool</span> water[<span class="number">301</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x]&lt;<span class="number">0</span>?x:(fa[x]=find(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=find(x);y=find(y);</span><br><span class="line"><span class="keyword">if</span>(fa[x]&gt;fa[y])</span><br><span class="line"> swap(x,y);</span><br><span class="line">fa[x]+=fa[y];</span><br><span class="line">minn[x]=min(minn[x],minn[y]);</span><br><span class="line">fa[y]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].from=from;</span><br><span class="line">e[cnt].to=to;</span><br><span class="line">e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tx,ty;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">n=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> fa[i]=<span class="number">-1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">w[i]=read();</span><br><span class="line">minn[i]=w[i];</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> rep(j,<span class="number">1</span>,n)</span><br><span class="line"> &#123;</span><br><span class="line">tx=read();</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)<span class="comment">//not have to add an edge twice</span></span><br><span class="line"> add(i,j,tx);</span><br><span class="line"> &#125;</span><br><span class="line">sort(e+<span class="number">1</span>,e+cnt+<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,cnt)</span><br><span class="line">&#123;</span><br><span class="line">tx=find(e[i].from);ty=find(e[i].to);</span><br><span class="line"><span class="keyword">if</span>(tx==ty)</span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(min(minn[tx],minn[ty])+e[i].v&lt;=minn[tx]+minn[ty])<span class="comment">//e[i].v&lt;=minn[tx]+minn[ty])</span></span><br><span class="line">&#123;</span><br><span class="line">ans+=e[i].v;</span><br><span class="line">merge(tx,ty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">tx=find(i);</span><br><span class="line"><span class="keyword">if</span>(!water[tx])</span><br><span class="line">&#123;</span><br><span class="line">ans+=minn[tx];</span><br><span class="line">water[tx]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【USACO09NOV】找工就业Job Hunt</title>
      <link href="/2018/10/12/%5BUSACO09NOV%5D%E6%89%BE%E5%B7%A5%E5%B0%B1%E4%B8%9AJob%20Hunt/"/>
      <url>/2018/10/12/%5BUSACO09NOV%5D%E6%89%BE%E5%B7%A5%E5%B0%B1%E4%B8%9AJob%20Hunt/</url>
      <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1938" target="_blank" rel="noopener">luogu P1938</a></p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>Bessie is running out of money and is searching for jobs. Farmer John knows this and wants the cows to travel around so he has imposed a rule that his cows can only make D (1 &lt;= D &lt;= 1,000) dollars in a city before they must work in another city. Bessie can, however, return to a city after working elsewhere for a while and again earn the D dollars maximum in that city. There is no limit on the number of times Bessie can do this.</p><p>Bessie's world comprises P (1 &lt;= P &lt;= 150) one-way paths connecting C (2 &lt;= C &lt;= 220) cities conveniently numbered 1..C. Bessie is currently in city S (1 &lt;= S &lt;= C). Path i runs one-way from city A_i to city B_i (1 &lt;= A_i &lt;= C; 1 &lt;= B_i &lt;= C) and costs nothing to traverse.</p><p>To help Bessie, Farmer John will give her access to his private jet service. This service features F (1 &lt;= F &lt;= 350) routes, each of which is a one way flight from one city J_i to a another K_i (1 &lt;= J_i &lt;= C; 1 &lt;= K_i &lt;= C) and which costs T_i (1 &lt;= T_i &lt;= 50,000) dollars. Bessie can pay for the tickets from future earnings if she doesn't have the cash on hand.</p><p>Bessie can opt to retire whenever and wherever she wants. Given an unlimited amount of time, what is the most money that Bessie can make presuming she can make the full D dollars in each city she can travel to? Print -1 if there is no limit to this amount.</p><p>奶牛们正在找工作。农场主约翰知道后，鼓励奶牛们四处碰碰运气。而且他还加了一条要求：一头牛在一个城市最多只能赚D（1≤D≤1000）美元，然后它必须到另一座城市工作。当然，它可以在别处工作一阵子后又回到原来的城市再最多赚D美元。而且这样的往返次数没有限制。</p><p>城市间有P（1≤P≤150）条单向路径连接，共有C（2≤C≤220）座城市，编号从1到C。奶牛贝茜当前处在城市S（1≤S≤C）。路径i从城市A_i到城市B_i（1≤A_i≤C，1≤B_i≤C），在路径上行走不用任何花费。</p><p>为了帮助贝茜，约翰让它使用他的私人飞机服务。这项服务有F条（1≤F≤350）单向航线，每条航线是从城市J_i飞到另一座城市K_i（1≤J_i≤C，1≤K_i≤C），费用是T_i（1≤T_i≤50000）美元。如果贝茜手中没有现钱，可以用以后赚的钱来付机票钱。</p><p>贝茜可以选择在任何时候，在任何城市退休。如果在工作时间上不做限制，贝茜总共可以赚多少钱呢？如果赚的钱也不会出现限制，就输出-1。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第一行：5个用空格分开的整数D，P，C，F，S。</p><p>第2到第P+1行：第i+1行包含2个用空格分开的整数，表示一条从城市A_i到城市B_i的单向路径。</p><p>接下来F行，每行3个用空格分开的整数，表示一条从城市J_i到城市K_i的单向航线，费用是T_i。</p><p></p><strong>输出格式：</strong><br><p></p><p>一个整数，在上述规则下最多可以赚到的钱数。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>100 3 5 2 11 52 31 45 2 1502 5 120</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>250</pre></div></div><h2>说明</h2><p>This world has five cities, three paths and two jet routes. Bessie starts out in city 1, and she can only make 100 dollars in each city before moving on.</p><p>Bessie can travel from city 1 to city 5 to city 2 to city 3, and make a total of 4*100 - 150 = 250 dollars.</p><p>Source: USACO 2009 November Silver</p><p>这个世界上有五个城市，三条单向路径和两条单向航线。贝茜从一号城市开始她的旅行，她在离开一个城市前最多只能在这个城市赚100美元。</p><p>贝茜可以通过从一号城市--&gt;五号城市--&gt;二号城市--&gt;三号城市的旅行赚到4*100-150=250美元。</p><p>(注:在四个城市各赚100美元,从五号城市飞到二号城市花掉150美元)</p><p>来源:USACO 2009 十一月银组</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div>---<h2>sol</h2><p>直接建图spfa最长路，再加个判正环（虽然数据里好像并没有输出-1的点）</p><p>好久没打spfa了。。。居然打错了好几次。。。总结一下错误：</p><pre><code>忘了出队出队的时候忘了去掉在队列中的标记忘了切到下一条边（指邻接链表）答案初始化错了orz读入优化居然把&amp;&amp;写成了||</code></pre><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> d,p,c,f,s;</span><br><span class="line"><span class="keyword">int</span> last[<span class="number">300</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> incnt[<span class="number">300</span>],q[<span class="number">100000</span>],qh,qt,dis[<span class="number">300</span>];<span class="comment">//in_queue_count , queue , q_head , q_tail , dis</span></span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">300</span>]; <span class="comment">// judge if it is in queue</span></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next=last[from];</span><br><span class="line">    last[from]=cnt;</span><br><span class="line">    e[cnt].to=to;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sb=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tz=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;'a';</span></span><br><span class="line">    d=read();p=read();c=read();f=read();s=read();</span><br><span class="line">    <span class="comment">//cout&lt;&lt;d&lt;&lt;' '&lt;&lt;p&lt;&lt;' '&lt;&lt;c&lt;&lt;' '&lt;&lt;f&lt;&lt;' '&lt;&lt;s&lt;&lt;'\n';</span></span><br><span class="line">    ans=d;</span><br><span class="line">    rep(i,<span class="number">1</span>,c)</span><br><span class="line">     dis[i]=<span class="number">-2000000000</span>;</span><br><span class="line">    dis[s]=d;</span><br><span class="line">    rep(i,<span class="number">1</span>,p)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,f)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tz=read();</span><br><span class="line">        add(tx,ty,tz);</span><br><span class="line">    &#125;</span><br><span class="line">    q[qt]=s;</span><br><span class="line">    <span class="keyword">while</span>(qh&lt;=qt)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=last[q[qh]];</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[q[qh]]-e[temp].v+d&gt;dis[e[temp].to])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[temp].to]=dis[q[qh]]-e[temp].v+d;</span><br><span class="line">                ans=max(ans,dis[e[temp].to]);</span><br><span class="line">                <span class="keyword">if</span>(!inq[e[temp].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    incnt[e[temp].to]++;</span><br><span class="line">                    q[++qt]=e[temp].to;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(incnt[e[temp].to]&gt;=c+<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    sb=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=e[temp].next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sb)</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">        inq[q[qh]]=<span class="number">0</span>;</span><br><span class="line">        ++qh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sb)</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>婆罗门的辣鸡问题解题报告</title>
      <link href="/2018/10/12/%E5%A9%86%E7%BD%97%E9%97%A8%E7%9A%84%E8%BE%A3%E9%B8%A1%E9%97%AE%E9%A2%98%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/12/%E5%A9%86%E7%BD%97%E9%97%A8%E7%9A%84%E8%BE%A3%E9%B8%A1%E9%97%AE%E9%A2%98%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<p>总体来说还算可以的一套题。。。</p><a id="more"></a><p>难度貌似有点倒序？</p><h2>婆罗门的山区火箭运输</h2><p>这题实际上相当于货车运输的高度弱化版。。。</p><p>看到最大值最小就想到了二分答案。。。但是二分答案的验证复杂度不稳定。。。</p><p>最坏大概是O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mi>m</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{nm}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.664392em;"></span><span class="strut bottom" style="height:0.664392em;vertical-align:0em;"></span><span class="base"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">n</span><span class="mord mathit mtight">m</span></span></span></span></span></span></span></span></span></span></span></span>log max{<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">w_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span></span></span></span>}-min{<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">w_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span></span></span></span>})</p><p>并不能稳过</p><p>而转化成货车运输的思路，操作比那要简单得多</p><p>先建图，把点权差的绝对值当做边权</p><p>因为只需要求出（1,1）到（n,m）的所有路径中最小值最大的那个最小的最大值</p><p>所以就可以做一颗最小生成树</p><p>而且只需要加边到让(1,1)和(n,m)联通即可，然后不断更新ans</p><p>显然是正确的</p><p>复杂度O(nm log nm) （忽略了并查集、建图和读入。。。）</p><p>但是我空间开小了。。。然后就炸了4个点qwq，开了两倍空间就可以a了</p><p>1.5s就能卡掉了二分答案。。。1s可以卡个常数，需要读入优化+一些简单卡常操作。。。</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;b)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[MAXN*MAXN*<span class="number">2</span>];<span class="comment">//12MB*2</span></span><br><span class="line"><span class="keyword">int</span> w[MAXN+<span class="number">1</span>][MAXN+<span class="number">1</span>],n,m,cnt,fa[MAXN*MAXN*<span class="number">2</span>];<span class="comment">//less than 12 MB*2</span></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].from=from;</span><br><span class="line">e[cnt].to=to;</span><br><span class="line">e[cnt].v=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//union -&gt; find</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x]?(fa[x]=find(fa[x])):x;<span class="comment">//lu jing ya suo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//union -&gt; merge</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=find(x);y=find(y);</span><br><span class="line">fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"mountain.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"mountain.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span> fa);</span><br><span class="line"><span class="keyword">int</span> tempa,tempb;</span><br><span class="line">n=read();m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> rep(j,<span class="number">1</span>,m)</span><br><span class="line">  w[i][j]=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="comment">//build the map , add edge one by one</span></span><br><span class="line">&#123;</span><br><span class="line">rep(j,<span class="number">1</span>,m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if(i==1&amp;&amp;j==1)</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;i*m+j&lt;&lt;' '&lt;&lt;1*m+1&lt;&lt;'\n';</span></span><br><span class="line"><span class="comment">//if(i==n&amp;&amp;j==m)</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;i*m+j&lt;&lt;' '&lt;&lt;n*m+m&lt;&lt;'\n';</span></span><br><span class="line"><span class="keyword">if</span>(i!=n)<span class="comment">//if(i&lt;n)</span></span><br><span class="line"> add(i*m+j,(i+<span class="number">1</span>)*m+j,<span class="built_in">abs</span>(w[i][j]-w[i+<span class="number">1</span>][j]));</span><br><span class="line"><span class="keyword">if</span>(j!=m)<span class="comment">//if(j&lt;m)</span></span><br><span class="line"> add(i*m+j,i*m+j+<span class="number">1</span>,<span class="built_in">abs</span>(w[i][j]-w[i][j+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(e+<span class="number">1</span>,e+cnt+<span class="number">1</span>);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,cnt)<span class="comment">//kruskal , only need to let (1,1) and (n,m) are accessable each other</span></span><br><span class="line">&#123;</span><br><span class="line">tempa=find(e[i].from);tempb=find(e[i].to);</span><br><span class="line"><span class="keyword">if</span>(tempa==tempb)</span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line">merge(tempa,tempb);</span><br><span class="line">ans=max(ans,e[i].v);</span><br><span class="line"><span class="keyword">if</span>(find(<span class="number">1</span>*m+<span class="number">1</span>)==find(n*m+m))</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">fclose(<span class="built_in">stdin</span>);</span><br><span class="line">fclose(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>婆罗门的井字棋</h2><p>就是模拟。。。没什么好说的。。。</p><p>直接暴力判断，人工能写出来所有判断情况，应该就不会T了。。。</p><p>但是是真的考验耐心。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mapp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">bool</span> usedp[<span class="number">27</span>],usedt[<span class="number">27</span>][<span class="number">27</span>];<span class="comment">//used_person , used_team</span></span><br><span class="line"><span class="keyword">int</span> ansp,anst;<span class="comment">//ans_person , ans_team</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ansp=<span class="number">0</span>;anst=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(usedp,<span class="number">0</span>,<span class="keyword">sizeof</span> usedp);</span><br><span class="line"><span class="built_in">memset</span>(usedt,<span class="number">0</span>,<span class="keyword">sizeof</span> usedt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"count.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"count.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">init();</span><br><span class="line">ansp=<span class="number">0</span>;anst=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"> rep(j,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"> mapp[i][j]=(c-<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">3</span>)<span class="comment">//judge hang</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mapp[i][<span class="number">1</span>]==mapp[i][<span class="number">2</span>]&amp;&amp;mapp[i][<span class="number">2</span>]==mapp[i][<span class="number">3</span>])<span class="comment">//person win</span></span><br><span class="line"> <span class="keyword">if</span>(!usedp[mapp[i][<span class="number">1</span>]])</span><br><span class="line"> &#123;</span><br><span class="line"> usedp[mapp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line"> ++ansp;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[i][<span class="number">1</span>]==mapp[i][<span class="number">2</span>]&amp;&amp;mapp[i][<span class="number">2</span>]!=mapp[i][<span class="number">3</span>])<span class="comment">//left two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">3</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[i][<span class="number">3</span>]][mapp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[i][<span class="number">1</span>]==mapp[i][<span class="number">3</span>]&amp;&amp;mapp[i][<span class="number">2</span>]!=mapp[i][<span class="number">3</span>])<span class="comment">//two points</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[i][<span class="number">2</span>]][mapp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[i][<span class="number">2</span>]==mapp[i][<span class="number">3</span>]&amp;&amp;mapp[i][<span class="number">1</span>]!=mapp[i][<span class="number">2</span>])<span class="comment">//right two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[i][<span class="number">2</span>]][mapp[i][<span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[i][<span class="number">2</span>]][mapp[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[i][<span class="number">1</span>]][mapp[i][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(j,<span class="number">1</span>,<span class="number">3</span>)<span class="comment">//judge lie</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][j]==mapp[<span class="number">2</span>][j]&amp;&amp;mapp[<span class="number">2</span>][j]==mapp[<span class="number">3</span>][j])<span class="comment">//person win</span></span><br><span class="line"> <span class="keyword">if</span>(!usedp[mapp[<span class="number">1</span>][j]])</span><br><span class="line"> &#123;</span><br><span class="line"> ++ansp;</span><br><span class="line"> usedp[mapp[<span class="number">1</span>][j]]=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][j]==mapp[<span class="number">2</span>][j]&amp;&amp;mapp[<span class="number">2</span>][j]!=mapp[<span class="number">3</span>][j])<span class="comment">//up two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">3</span>][j]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">3</span>][j]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">3</span>][j]][mapp[<span class="number">2</span>][j]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][j]==mapp[<span class="number">3</span>][j]&amp;&amp;mapp[<span class="number">2</span>][j]!=mapp[<span class="number">3</span>][j])<span class="comment">//two points</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">3</span>][j]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">3</span>][j]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">3</span>][j]][mapp[<span class="number">2</span>][j]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">2</span>][j]==mapp[<span class="number">3</span>][j]&amp;&amp;mapp[<span class="number">1</span>][j]!=mapp[<span class="number">2</span>][j])<span class="comment">//down two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][j]][mapp[<span class="number">2</span>][j]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][j]][mapp[<span class="number">2</span>][j]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][j]][mapp[<span class="number">1</span>][j]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//judge dui jiao xian</span></span><br><span class="line"><span class="comment">//left-&gt;right</span></span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">1</span>]==mapp[<span class="number">2</span>][<span class="number">2</span>]&amp;&amp;mapp[<span class="number">2</span>][<span class="number">2</span>]==mapp[<span class="number">3</span>][<span class="number">3</span>])<span class="comment">//person win</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedp[mapp[<span class="number">1</span>][<span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedp[mapp[<span class="number">1</span>][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">ansp++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">1</span>]==mapp[<span class="number">2</span>][<span class="number">2</span>]&amp;&amp;mapp[<span class="number">2</span>][<span class="number">2</span>]!=mapp[<span class="number">3</span>][<span class="number">3</span>])<span class="comment">//up two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">3</span>][<span class="number">3</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">3</span>][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">3</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">1</span>]==mapp[<span class="number">3</span>][<span class="number">3</span>]&amp;&amp;mapp[<span class="number">1</span>][<span class="number">1</span>]!=mapp[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">//two points</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">1</span>][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">2</span>][<span class="number">2</span>]==mapp[<span class="number">3</span>][<span class="number">3</span>]&amp;&amp;mapp[<span class="number">1</span>][<span class="number">1</span>]!=mapp[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">//down two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">1</span>][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//right-&gt;left</span></span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">3</span>]==mapp[<span class="number">2</span>][<span class="number">2</span>]&amp;&amp;mapp[<span class="number">2</span>][<span class="number">2</span>]==mapp[<span class="number">3</span>][<span class="number">1</span>])<span class="comment">//person win</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedp[mapp[<span class="number">1</span>][<span class="number">3</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedp[mapp[<span class="number">1</span>][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">ansp++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">3</span>]==mapp[<span class="number">2</span>][<span class="number">2</span>]&amp;&amp;mapp[<span class="number">2</span>][<span class="number">2</span>]!=mapp[<span class="number">3</span>][<span class="number">1</span>])<span class="comment">//up two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">3</span>][<span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">3</span>][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">3</span>][<span class="number">1</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">1</span>][<span class="number">3</span>]==mapp[<span class="number">3</span>][<span class="number">1</span>]&amp;&amp;mapp[<span class="number">1</span>][<span class="number">3</span>]!=mapp[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">//two points</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">1</span>][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mapp[<span class="number">2</span>][<span class="number">2</span>]==mapp[<span class="number">3</span>][<span class="number">1</span>]&amp;&amp;mapp[<span class="number">1</span>][<span class="number">3</span>]!=mapp[<span class="number">2</span>][<span class="number">2</span>])<span class="comment">//down two</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!usedt[mapp[<span class="number">1</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">usedt[mapp[<span class="number">1</span>][<span class="number">3</span>]][mapp[<span class="number">2</span>][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">usedt[mapp[<span class="number">2</span>][<span class="number">2</span>]][mapp[<span class="number">1</span>][<span class="number">3</span>]]=<span class="number">1</span>;</span><br><span class="line">anst++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>,ansp,anst);</span><br><span class="line">fclose(<span class="built_in">stdin</span>);</span><br><span class="line">fclose(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>婆罗门的城市斗鸡</h2><p>这题数据水了，最大的N其实只有不到6000，应该O(N^2)也能过，但是不开long long就没救了</p><p>正解是O(N log N)的排序和O(N)的计算</p><p>考虑一下两个点中间夹着一个点，这两个点的距离其实可以拆分成前面的点和中间的点的距离以及后面的点和中间的点的距离</p><p>然后考虑每个点和它的后一个点的贡献，比如x和x+1，他们的距离包含在了x * (n-x)对里，也就是他们的距离在答案中出现了x * (n-x)次，直接加上这个数，每个点都这么做</p><p>最后算出来是一半的，然后 * 2就ok了</p><p>记得开long long</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> pos[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"chicken.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"chicken.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> pos[i]=read();</span><br><span class="line">sort(pos+<span class="number">1</span>,pos+n+<span class="number">1</span>);</span><br><span class="line">--n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> ans+=(<span class="keyword">long</span> <span class="keyword">long</span>)(((<span class="keyword">long</span> <span class="keyword">long</span>)i)*(<span class="keyword">long</span> <span class="keyword">long</span>)(n+<span class="number">1</span>-i)*(pos[i+<span class="number">1</span>]-pos[i]));</span><br><span class="line">ans=(<span class="keyword">long</span> <span class="keyword">long</span>)(ans*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">fclose(<span class="built_in">stdin</span>);</span><br><span class="line">fclose(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>测试题目：</p><p>链接：<a href="https://pan.baidu.com/s/1fG4u5aqBIp-LBShIUszgfw" target="_blank" rel="noopener">https://pan.baidu.com/s/1fG4u5aqBIp-LBShIUszgfw</a><br>提取码：g2js</p><p>评测环境lemon，已配置好，请放心食用</p>]]></content>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj 2456 mode</title>
      <link href="/2018/10/10/bzoj%202456%20mode/"/>
      <url>/2018/10/10/bzoj%202456%20mode/</url>
      <content type="html"><![CDATA[<p>神奇的解法。。。</p><a id="more"></a><title>Problem 2456. -- mode</title><center><h2>2456: mode</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>1 MB<br><span class="green">Submit: </span>7662&nbsp;&nbsp;<span class="green">Solved: </span>2932<br>[<a href="submitpage.php?id=2456">Submit</a>][<a href="problemstatus.php?id=2456">Status</a>][<a href="bbs.php?id=2456">Discuss</a>]</center><h2>Description</h2><div class="content"><p>给你一个n个数的数列，其中某个数出现了超过n div 2次即众数，请你找出那个数。</p></div><h2>Input</h2><div class="content"><p>第1行一个正整数n。<br></p><p>第2行n个正整数用空格隔开。</p><h2>Output</h2><p>&nbsp;&nbsp;&nbsp; 一行一个正整数表示那个众数。</p></div><h2>Sample Input</h2>5<p>3 2 3 1 3</p><h2>Sample Output</h2><pre><code>&lt;div class=content&gt;&lt;span class=sampledata&gt;3&lt;br /&gt;</code></pre><p></p><h2>HINT</h2><br><div class="content"><p></p><p>100%的数据，n&lt;=500000，数列中每个数&lt;=maxlongint。</p><br><p></p><p></p><br><hr><h2>sol</h2><p>一开始以为离散化+sort，结果空间只有1MB</p><p>然后看了题解</p><p>先是题里对众数的定义，出现次数超过n/2的数</p><p>也就是说只可能有一个众数</p><p>然后用的这种算法好像是把不是众数的数撞掉</p><p>具体可以看代码，真的短。。。</p><p>不知道为什么现在写代码会犯很多sb错误orz，感觉脑子不是很好使了…</p><hr><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x=<span class="number">-1</span>,sb;</span><br><span class="line"><span class="keyword">int</span> n,tag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sb);</span><br><span class="line"><span class="keyword">if</span>(sb==x)</span><br><span class="line"> tag+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> tag-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tag&lt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=sb;</span><br><span class="line">tag=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 神奇操作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P3916 图的遍历</title>
      <link href="/2018/10/10/P3916%20%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2018/10/10/P3916%20%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<p>一道图论题</p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p>给出$N$个点，$M$条边的有向图，对于每个点$v$，求$A(v)$表示从点$v$出发，能到达的编号最大的点。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>第1 行，2 个整数$N,M$。</p><p>接下来$M$行，每行2个整数$U_i,V_i$，表示边$(U_i,V_i)$。点用$1, 2,\cdots,N$编号。</p><p></p><strong>输出格式：</strong><br><p></p><p>N 个整数$A(1),A(2),\cdots,A(N)$。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 31 22 44 3</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 4 3 4</pre></div></div><h2>说明</h2><p>• 对于60% 的数据，$1 \le N . K \le 10^3$；</p><p>• 对于100% 的数据，$1 \le N , M \le 10^5$。</p></div><hr><h1>sol</h1><p>看到这题第一眼：</p><p>记忆化，直接搜</p><p>然后就WA了</p><p>大概能知道某种环可以卡掉，但是不知道怎么构造以及为什么</p><p>其实是因为后搜到的没办法更新了</p><p>比如这组数据(感谢<a href="sxyugao.top">@sxyugao</a>大佬提供的hack数据，原题hack数据太大了。。。)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 3</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><p>所以我们反着建图，记录大的点能到哪些小的点（也就是原图小的点能到哪些大的点），从大的开始搜索，就不会存在这样的问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>],last[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">const</span> <span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x])</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">a[x]=st;</span><br><span class="line"><span class="keyword">int</span> temp=last[x];</span><br><span class="line"><span class="keyword">while</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line">dfs(e[temp].to,st);</span><br><span class="line">temp=e[temp].next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;from,<span class="keyword">const</span> <span class="keyword">int</span> &amp;to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].to=from;</span><br><span class="line">e[cnt].next=last[to];</span><br><span class="line">last[to]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tx,ty;</span><br><span class="line">n=read();m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,m)</span><br><span class="line">&#123;</span><br><span class="line">tx=read();ty=read();</span><br><span class="line">add(tx,ty);</span><br><span class="line">&#125;</span><br><span class="line">per(i,n,<span class="number">1</span>)</span><br><span class="line"> dfs(i,i);</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3>题外话</h3><p>图论的题还是比较玄学啊orz</p><p>不知道要怎么练习这种东西</p></div></div>]]></content>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CF437C The Child and Toy</title>
      <link href="/2018/10/10/CF437C%20The%20Child%20and%20Toy/"/>
      <url>/2018/10/10/CF437C%20The%20Child%20and%20Toy/</url>
      <content type="html"><![CDATA[<p>贪心，神仙图论</p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题意翻译</h2><p>n个带权点，m条无向边，删除一个点就要付出所有与之有联系且没有被删除的点的点权之和的代价。</p><p>求删除所有点的最小代价。</p><h2>题目描述</h2><p>On Children's Day, the child got a toy from Delayyy as a present. However, the child is so naughty that he can't wait to destroy the toy.</p><p>The toy consists of $ n $ parts and $ m $ ropes. Each rope links two parts, but every pair of parts is linked by at most one rope. To split the toy, the child must remove all its parts. The child can remove a single part at a time, and each remove consume an energy. Let's define an energy value of part $ i $ as $ v_{i} $ . The child spend $ v_{f1}+v_{f2}+...+v_{fk} $ energy for removing part $ i $ where $ f_{1},f_{2},...,f_{k} $ are the parts that are directly connected to the $ i $ -th and haven't been removed.</p><p>Help the child to find out, what is the minimum total energy he should spend to remove all $ n $ parts.</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>The first line contains two integers $ n $ and $ m $ ( $ 1&lt;=n&lt;=1000 $ ; $ 0&lt;=m&lt;=2000 $ ). The second line contains $ n $ integers: $ v_{1},v_{2},...,v_{n} $ ( $ 0&lt;=v_{i}&lt;=10^{5} $ ). Then followed $ m $ lines, each line contains two integers $ x_{i} $ and $ y_{i} $ , representing a rope from part $ x_{i} $ to part $ y_{i} $ ( $ 1&lt;=x_{i},y_{i}&lt;=n; x_{i}≠y_{i} $ ).</p><p>Consider all the parts are numbered from $ 1 $ to $ n $ .</p><p></p><strong>输出格式：</strong><br><p></p><p>Output the minimum total energy the child should spend to remove all $ n $ parts of the toy.</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 310 20 30 401 41 22 3</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>40</pre></div></div><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#2：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>4 4100 100 100 1001 22 32 43 4</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#2：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>400</pre></div></div><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#3：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>7 1040 10 20 10 20 80 401 54 74 55 25 76 41 61 34 31 4</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#3：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>160</pre></div></div><h2>说明</h2><p>One of the optimal sequence of actions in the first sample is:</p><ul><li>First, remove part $ 3 $ , cost of the action is $ 20 $ .</li><li>Then, remove part $ 2 $ , cost of the action is $ 10 $ .</li><li>Next, remove part $ 4 $ , cost of the action is $ 10 $ .</li><li>At last, remove part $ 1 $ , cost of the action is $ 0 $ .</li></ul><p>So the total energy the child paid is $ 20+10+10+0=40 $ , which is the minimum.</p><p>In the second sample, the child will spend $ 400 $ no matter in what order he will remove the parts.</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div><hr><h1>sol</h1><p>首先有个比较显然的贪心</p><p>每个点再记录与之相连的未被删除的点的点权之和</p><p>然后每次删除最小，并处理与之相连的点，重新排序</p><p>这样复杂度大概是O(n(n log n + m))</p><p>好像也能过？</p><p>但是还有更好的做法：</p><p>我们考虑这些点，删点之后，与之相连的边就都会消失</p><p>所以删点&lt;=&gt;删边</p><p>而每一条边的贡献就是其两端的点的权值min</p><p>这个东西我并不会证明。。。但是看了几组确实是这样</p><p>看了课件才知道这个做法。。。神仙图论。。。</p><p>这样的复杂度是O(n+m)</p><p>黄学长的课件是这么写的</p><pre><code>按照从⼤到小的次序删点。发现每条边的贡献是连接的两个点的权值的最小</code></pre><p>orzzzzzzzzzzzzz</p><hr><h1>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a*=<span class="number">10</span>;</span><br><span class="line">a+=(c-<span class="string">'0'</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,w[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tx,ty;</span><br><span class="line">n=read();m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> w[i]=read();</span><br><span class="line">rep(j,<span class="number">1</span>,m)</span><br><span class="line">&#123;</span><br><span class="line">tx=read();ty=read();</span><br><span class="line">ans+=min(w[tx],w[ty]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mayan游戏</title>
      <link href="/2018/10/10/Mayan%E6%B8%B8%E6%88%8F/"/>
      <url>/2018/10/10/Mayan%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p>大码力模拟。。。</p><a id="more"></a><div class="am-u-md-8 lg-right" name="problemleft"><div class="lg-content-left"><div class="lg-article am-g"><h2>题目描述</h2><p><code>Mayan puzzle</code>是最近流行起来的一个游戏。游戏界面是一个$ 7$ 行$ \times 5 $列的棋盘，上面堆放着一些方块，方块不能悬空堆放，即方块必须放在最下面一行，或者放在其他方块之上。游戏通关是指在规定的步数内消除所有的方块，消除方块的规则如下：</p><p>1 、每步移动可以且仅可以沿横向（即向左或向右）拖动某一方块一格：当拖动这一方块时，如果拖动后到达的位置（以下称目标位置）也有方块，那么这两个方块将交换位置（参见输入输出样例说明中的图$6 $到图$7$ ）；如果目标位置上没有方块，那么被拖动的方块将从原来的竖列中抽出，并从目标位置上掉落（直到不悬空，参见下面图1 和图2）；</p><p><img src="https://cdn.luogu.org/upload/pic/103.png" alt=""> </p><p>2 、任一时刻，如果在一横行或者竖列上有连续三个或者三个以上相同颜色的方块，则它们将立即被消除（参见图1 到图3）。</p><p><img src="https://cdn.luogu.org/upload/pic/102.png" alt=""> </p><p>注意：</p><p>a) 如果同时有多组方块满足消除条件，几组方块会同时被消除（例如下面图$4$ ，三个颜色为$1$ 的方块和三个颜色为 $2$ 的方块会同时被消除，最后剩下一个颜色为$ 2 $的方块）。</p><p>b) 当出现行和列都满足消除条件且行列共享某个方块时，行和列上满足消除条件的所有方块会被同时消除（例如下面图5 所示的情形，5 个方块会同时被消除）。</p><p>3 、方块消除之后，消除位置之上的方块将掉落，掉落后可能会引起新的方块消除。注意：掉落的过程中将不会有方块的消除。</p><p>上面图1 到图 3 给出了在棋盘上移动一块方块之后棋盘的变化。棋盘的左下角方块的坐标为（0, 0 ），将位于（3, 3 ）的方块向左移动之后，游戏界面从图 1 变成图 2 所示的状态，此时在一竖列上有连续三块颜色为4 的方块，满足消除条件，消除连续3 块颜色为4 的方块后，上方的颜色为3 的方块掉落，形成图 3 所示的局面。</p><h2>输入输出格式</h2><strong>输入格式：</strong><br><p></p><p>共 6 行。</p><p>第一行为一个正整数$n $，表示要求游戏通关的步数。</p><p>接下来的$5 $行，描述$ 7 \times 5$ 的游戏界面。每行若干个整数，每两个整数之间用一个空格隔开，每行以一个$0$ 结束，自下向上表示每竖列方块的颜色编号（颜色不多于$10$种，从$1 $开始顺序编号，相同数字表示相同颜色）。</p><p>输入数据保证初始棋盘中没有可以消除的方块。</p><p></p><strong>输出格式：</strong><br><p></p><p>如果有解决方案，输出$n$行，每行包含 $3$ 个整数$x,y,g$，表示一次移动，每两个整数之间用一个空格隔开，其中$(x ,y)$表示要移动的方块的坐标，$g$ 表示移动的方向，$1$ 表示向右移动，$-1$表示向左移动。注意：多组解时，按照$x$为第一关健字，$y$为第二关健字，$1$优先于$-1$ ，给出一组字典序最小的解。游戏界面左下角的坐标为$(0 ,0)$。</p><p>如果没有解决方案，输出一行，包含一个整数$-1$。</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>31 02 1 02 3 4 03 1 02 4 3 4 0</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>2 1 13 1 13 0 1</pre></div></div><h2>说明</h2><p>【输入输出样例说明】</p><p>按箭头方向的顺序分别为图$6$到图$11$</p><p><img src="https://cdn.luogu.org/upload/pic/104.png" alt=""> </p><p>样例输入的游戏局面如上面第一个图片所示，依次移动的三步是：$(2 ,1 )$处的方格向右移动，$(3,1)$处的方格向右移动，$(3,0)$处的方格向右移动，最后可以将棋盘上所有方块消除。</p><p>【数据范围】</p><p>对于$30\%$的数据，初始棋盘上的方块都在棋盘的最下面一行；</p><p>对于$100\%$的数据，$0 &lt; n≤5$ 。</p><p>noip2011提高组day1第3题</p></div><div class="lg-article-sub am-g" id="sub"></div></div></div><hr><h1>sol</h1><p>大模拟+dfs orz</p><p>存图用的栈开小了（其实是没有删掉没用的图）调了一上午orz</p><p>其实题目只有几个核心操作</p><p>移动 move()</p><p>消除 del()</p><p>下落 down()</p><p>检验是否有块可以消除 judge()</p><p>基本上就是一道纯代码能力题。。。</p><p>搜索直接按字典序优先的顺序来搜，这样找到的第一个答案就是题目要求的</p><p>消除我是维护了一个栈，在检验到能消除的地方之后压入位置，长度和消除方向，都从左向右，从下向上</p><p>而且注意到下落之后可能还会引起新的消除，所以把judge()和down()做成了两个bool型的</p><p>然后再加一点小的剪枝就够了，毕竟3s</p><p>其实写这种码力题还是挺有趣的orzzzzzzzzz</p><p>但是不知道为什么在dfs后面加一句</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--cnt;</span><br></pre></td></tr></table></figure><p>就会跑不出来，玄学</p><p>模拟题没什么好说的，总结一下代码里的sb错误：</p><pre><code>存图栈开小了，或者说搜完之后没有退栈搜索没判断是否在终态成功消除完了，然后就有好几个输出。。。</code></pre><hr><h1>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> mapp[<span class="number">500000</span>][<span class="number">8</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> step[<span class="number">500000</span>],n;</span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> ansx[<span class="number">6</span>],ansy[<span class="number">6</span>],ansg[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> solved=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> delx_que[<span class="number">1001</span>],dely_que[<span class="number">1001</span>],dell_que[<span class="number">1001</span>],delqt=<span class="number">0</span>;<span class="comment">//del_xpos_stack , del_ypos_stack , del_length_stack , del_stack_top</span></span><br><span class="line"><span class="keyword">bool</span> deld_que[<span class="number">1001</span>];<span class="comment">//del_direction_queue 0-&gt;up 1-&gt;right</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">8</span>][<span class="number">6</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">bool</span> dir,<span class="keyword">const</span> <span class="keyword">int</span> &amp;w)</span><span class="comment">//change the pos of block , dir:0-&gt;left 1-&gt;right , w:last map</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(mapp[++cnt],mapp[w],<span class="keyword">sizeof</span> mapp[w]);<span class="comment">//copy the pre map</span></span><br><span class="line"><span class="keyword">if</span>(dir)<span class="comment">//move to right</span></span><br><span class="line"> swap(mapp[cnt][x][y],mapp[cnt][x][y+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span><span class="comment">//move to left</span></span><br><span class="line"> swap(mapp[cnt][x][y],mapp[cnt][x][y<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span><span class="comment">//operate in the del_stack</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(delqt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(deld_que[delqt])<span class="comment">//del_right</span></span><br><span class="line">&#123;</span><br><span class="line">rep(j,dely_que[delqt],dely_que[delqt]+dell_que[delqt]<span class="number">-1</span>)</span><br><span class="line"> mapp[x][delx_que[delqt]][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//del_up</span></span><br><span class="line">&#123;</span><br><span class="line">rep(i,delx_que[delqt],delx_que[delqt]+dell_que[delqt]<span class="number">-1</span>)</span><br><span class="line"> mapp[x][i][dely_que[delqt]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">--delqt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">down</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span><span class="comment">//blocks which are flying fall down to the ground , from bottom to the top</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> sb=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tx;</span><br><span class="line">rep(i,<span class="number">2</span>,<span class="number">7</span>)</span><br><span class="line"> rep(j,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(mapp[x][i][j]&amp;&amp;!mapp[x][i<span class="number">-1</span>][j])</span><br><span class="line"> &#123;</span><br><span class="line"> sb=<span class="number">1</span>;</span><br><span class="line"> tx=i;</span><br><span class="line"> <span class="keyword">while</span>(tx&gt;<span class="number">1</span>&amp;&amp;!mapp[x][tx<span class="number">-1</span>][j])<span class="comment">//fall to ground</span></span><br><span class="line"> &#123;</span><br><span class="line"> swap(mapp[x][tx][j],mapp[x][tx<span class="number">-1</span>][j]);</span><br><span class="line"> --tx;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span><span class="comment">//judge if there is any block is del_able &amp; del it ,after del them ,drop</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> sb;</span><br><span class="line"><span class="keyword">int</span> temp,tx,ty;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">7</span>)</span><br><span class="line"> rep(j,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(!mapp[x][i][j])</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line"> temp=<span class="number">1</span>;</span><br><span class="line"> tx=i;ty=j;</span><br><span class="line"> <span class="keyword">while</span>(ty+<span class="number">1</span>&lt;=<span class="number">5</span>&amp;&amp;mapp[x][tx][ty]==mapp[x][tx][ty+<span class="number">1</span>]&amp;&amp;<span class="number">1</span><span class="comment">/*!vis[tx][ty+1][1]*/</span>)<span class="comment">//right</span></span><br><span class="line"> &#123;</span><br><span class="line"> ++temp;++ty; </span><br><span class="line"> <span class="comment">//vis[tx][ty][1]=1;</span></span><br><span class="line"> <span class="comment">//vis[tx][ty+1][1]=1;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(temp&gt;=<span class="number">3</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> ++delqt;</span><br><span class="line"> delx_que[delqt]=i;</span><br><span class="line"> dely_que[delqt]=j;</span><br><span class="line"> deld_que[delqt]=<span class="number">1</span>;</span><br><span class="line"> dell_que[delqt]=temp;</span><br><span class="line"> &#125;</span><br><span class="line"> temp=<span class="number">1</span>;</span><br><span class="line"> tx=i;ty=j;</span><br><span class="line"> <span class="keyword">while</span>(tx+<span class="number">1</span>&lt;=<span class="number">7</span>&amp;&amp;mapp[x][tx][ty]==mapp[x][tx+<span class="number">1</span>][ty]&amp;&amp;<span class="number">1</span><span class="comment">/*!vis[tx][ty+1][0]*/</span>)<span class="comment">//up</span></span><br><span class="line"> &#123;</span><br><span class="line"> ++temp;++tx;</span><br><span class="line"> <span class="comment">//vis[tx][ty][0]=1;</span></span><br><span class="line"> <span class="comment">//vis[tx+1][ty][0]=1;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(temp&gt;=<span class="number">3</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> ++delqt;</span><br><span class="line"> delx_que[delqt]=i;</span><br><span class="line"> dely_que[delqt]=j;</span><br><span class="line"> deld_que[delqt]=<span class="number">0</span>;</span><br><span class="line"> dell_que[delqt]=temp;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;delqt&lt;&lt;'\n';</span></span><br><span class="line">del(x);</span><br><span class="line">sb=down(x);</span><br><span class="line"><span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;ansx[i]&lt;&lt;<span class="string">' '</span>&lt;&lt;ansy[i]&lt;&lt;<span class="string">' '</span>&lt;&lt;ansg[i]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span><span class="comment">//read the natural map</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">rep(j,<span class="number">1</span>,<span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;mapp[<span class="number">0</span>][j][i];</span><br><span class="line"><span class="keyword">if</span>(!mapp[<span class="number">0</span>][j][i])</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth,<span class="keyword">int</span> x)</span><span class="comment">//dfs by dictionary num , if there is a sol , just print it . </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(judge(x));<span class="comment">//fall may be cause to successfully del</span></span><br><span class="line"><span class="keyword">if</span>(depth==n)</span><br><span class="line">&#123;</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">7</span>)</span><br><span class="line"> rep(j,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">if</span>(mapp[x][i][j])</span><br><span class="line">  &#123;</span><br><span class="line">  --cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">print();</span><br><span class="line">solved=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">rep(j,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"> rep(i,<span class="number">1</span>,<span class="number">7</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(mapp[x][i][j])<span class="comment">//if there is a block</span></span><br><span class="line"> &#123;</span><br><span class="line"> ansx[depth+<span class="number">1</span>]=j<span class="number">-1</span>;</span><br><span class="line"> ansy[depth+<span class="number">1</span>]=i<span class="number">-1</span>;<span class="comment">//only move to suqare area on the left &amp; the pos on the right</span></span><br><span class="line"> <span class="keyword">if</span>(j&lt;<span class="number">5</span>)<span class="comment">//move to right</span></span><br><span class="line"> &#123;</span><br><span class="line"> ansg[depth+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"> move(i,j,<span class="number">1</span>,x);</span><br><span class="line"> dfs(depth+<span class="number">1</span>,cnt);</span><br><span class="line"> <span class="keyword">if</span>(solved)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(j&gt;<span class="number">1</span>&amp;&amp;!mapp[x][i][j<span class="number">-1</span>])<span class="comment">//move to left</span></span><br><span class="line"> &#123;</span><br><span class="line"> ansg[depth+<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"> move(i,j,<span class="number">0</span>,x);</span><br><span class="line"> dfs(depth+<span class="number">1</span>,cnt);</span><br><span class="line"> <span class="keyword">if</span>(solved)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">read();</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!solved)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初探对偶图</title>
      <link href="/2018/10/09/%E5%AF%B9%E5%81%B6%E5%9B%BE/"/>
      <url>/2018/10/09/%E5%AF%B9%E5%81%B6%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>平面图与对偶图及其在最大流最小割方面的简单应用</p><a id="more"></a><p>欧拉公式：</p><pre><code>对于一张n个点，m条边的平面图，面数f=m-n+2</code></pre><p>平面图：</p><pre><code>所有边只在顶点处相交</code></pre><p>对偶图：</p><pre><code>对任一平面图，都存在其对偶图，平面图中每一个面对应其对偶图中的点记原平面图为G，其对偶图为G* ， G*的边有两种情况，回边和非回边，任一边与G中的边有交点</code></pre><p>所以这东西有什么用？</p><p>可以用来求最小割（最大流）！</p><p>对偶图G* 中的一条路对应原图G中的一个割 ， 所以求G* 中的最短路就相当于求了G 中的最小割</p><p>求最大流只会一个FF算法。。。复杂度并不会分析</p><p>这样转化之后至少出现了方便分析复杂度(对我来说。。。)的算法–最短路</p><p>所以求平面图最小割就可以建对偶图后跑一边最短路</p><p>例题：</p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1001" target="_blank" rel="noopener">bzoj 1001: [BeiJing2006]狼抓兔子</a></p><p>f * 之间边的权值就是之前原来的点 f 之间与f * 的边交叉的边的权值。</p><p>一开始以为是裸的最小割。。。然而这样稠密的图好像并不能过orz</p><p><s>代码</s></p><h6>不存在的</h6><hr><h2>总结</h2><p>图论真的神奇啊orz</p><p>虽然了解了对偶图和它最短路求最小割这一应用，但是感觉理解并不透彻。。。并不会证明。。。</p><p>网络流还需要进一步学习</p><p>最后还是先保全noip 2018成绩吧。。。毕竟高三了，之前并没参加过比赛，也就只能先争取1=敲开自招大门了。。。大学再战</p><hr><h2>参考文章</h2><ul><li><a herf="https://www.cnblogs.com/abclzr/p/5033461.html">【BZOJ 1001】狼抓兔子 对偶图+SPFA</a></li><li><a herf="https://blog.csdn.net/MaxMercer/article/details/77976666">关于平面图到对偶图的转化</a></li><li><a herf="http://blog.sina.com.cn/s/blog_60707c0f01011fnn.html">对偶图的应用</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小割 </tag>
            
            <tag> 对偶图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SCOI2005-互不侵犯-状压dp入门</title>
      <link href="/2018/10/09/%5BSCOI2005%5D%E4%BA%92%E4%B8%8D%E4%BE%B5%E7%8A%AF-%E7%8A%B6%E5%8E%8Bdp%E5%85%A5%E9%97%A8/"/>
      <url>/2018/10/09/%5BSCOI2005%5D%E4%BA%92%E4%B8%8D%E4%BE%B5%E7%8A%AF-%E7%8A%B6%E5%8E%8Bdp%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>状压dp入门题目</p><a id="more"></a><h2>题目描述</h2><p>在N×N的棋盘里面放K个国王，使他们互不攻击，共有多少种摆放方案。国王能攻击到它上下左右，以及左上左下右上右下八个方向上附近的各一个格子，共8个格子。</p><p>注：数据有加强（2018/4/25）</p><h2>输入输出格式</h2><p><strong>输入格式：</strong><br></p><p></p><p>只有一行，包含两个数N，K （ 1 &lt;=N &lt;=9, 0 &lt;= K &lt;= N * N）</p><p></p><strong>输出格式：</strong><br><p></p><p>所得的方案数</p><p></p><h2>输入输出样例</h2><div class="am-g"><div class="am-u-md-6 copy-region"><strong>输入样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>3 2</pre></div><div class="am-u-md-6 copy-region"><strong>输出样例#1：</strong><a class="am-badge am-radius lg-bg-orange sample-copy">复制</a><pre>16</pre><hr><h1>sol</h1><p>状压dp的经典入门题目</p><p>状态有三维（其实也可以滚动数组一下，不过我lazy了orz）</p><p>一维表示列，一维表示已经放置的king数，一维表示上一列king的位置（二进制表示，也就是状压dp的核心内容？）</p><p>然后转移枚举上一列的状态，judge一下然后转移就行了</p><p>没开long long居然调了10分钟orz，是真的烦人</p><p>复杂度O(nk2^{2n})，算出来好像1e9多，居然能过orz，还以为要加什么玄学优化来的</p><hr><h1>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=l;i&gt;=r;--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> dp[<span class="number">10</span>][<span class="number">82</span>][<span class="number">512</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> maxx;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> zt)</span><span class="comment">//judge if there is two kings that can attack each other</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp&lt;=maxx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((temp&amp;zt)==temp)</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> zt)</span><span class="comment">//count 1 in zt</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(zt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(zt&amp;<span class="number">1</span>)</span><br><span class="line">         ++ans;</span><br><span class="line">        zt&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line">    maxx=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">9</span>)<span class="comment">//lie</span></span><br><span class="line">     rep(w,<span class="number">0</span>,k)<span class="comment">//tot num of kings</span></span><br><span class="line">      rep(j,<span class="number">0</span>,maxx)<span class="comment">//condition of this lie</span></span><br><span class="line">       rep(t,<span class="number">0</span>,maxx)<span class="comment">//condition of last lie</span></span><br><span class="line">        <span class="keyword">if</span>(judge(j|t)&amp;&amp;(!(j&amp;t))&amp;&amp;(w-count(j)&gt;=<span class="number">0</span>))</span><br><span class="line">         dp[i][w][j]+=dp[i<span class="number">-1</span>][w-count(j)][t];</span><br><span class="line">    rep(i,<span class="number">0</span>,maxx)</span><br><span class="line">     ans+=dp[n][k][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>题外话</h1><p>其实状压dp也不一定用二进制</p><p>在qbxt做过一个，我用的三进制，虽然不是正解，但是可以A</p><p>而且状压dp也可以用矩阵加速一波</p></div></div>]]></content>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OI做题记录</title>
      <link href="/2018/10/09/OI%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/10/09/OI%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>不定期更新（咕咕咕）</p><a id="more"></a><p>CF492C Vanya and Exams   贪心</p><p>[SCOI2005]互不侵犯  状压dp</p><p>Hanoi双塔问题  高精+递推</p><p>luogu P1439 【模板】最长公共子序列   LIS(n log n)+离散化</p><p>奶酪  并查集</p><p>luogu P1784 数独  搜索</p><p>bzoj 3251: 树上三角形 暴力+找规律</p><p>Mayan游戏 : dfs，模拟</p><p>luogu P3916 图的遍历 : 搜索 记忆化</p><p>bzoj 2456 众数(mode) : 神奇操作</p><p>luogu P3368 【模板】树状数组 2 : 树状数组维护差分数组</p><p>luogu P2801 教主的魔法 : 线段树</p><p>考试：</p><p>婆罗门的山区火箭运输  生成树</p><p>婆罗门的井字棋  模拟</p><p>婆罗门的城市斗鸡  数学，模拟</p><p>[USACO09NOV]找工就业Job Hunt  spfa，判环</p><p>[USACO08OCT]打井Watering Hole  生成树，贪心</p><p>[USACO14FEB]路障Roadblock , luogu P1186 玛丽卡 : 暴力枚举，spfa</p><p>最接近神的人_NOI导刊2010提高（02）  逆序对，树状数组/归并排序</p><p>nowcoder 体积数  暴力枚举+快速幂+树状数组统计</p>]]></content>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIp提高模拟赛1</title>
      <link href="/2018/09/09/NOIp%E6%8F%90%E9%AB%98%E6%A8%A1%E6%8B%9F%E8%B5%9B1/"/>
      <url>/2018/09/09/NOIp%E6%8F%90%E9%AB%98%E6%A8%A1%E6%8B%9F%E8%B5%9B1/</url>
      <content type="html"><![CDATA[<h2>A</h2><h2 class="subject-item-title">题目描述<a href="javascript:void(0);" class="icon-fullscreen js-full-question" title="全屏查看题目" target="_blank" rel="noopener"></a><a href="javascript:void(0);" class="icon-resize-small js-small-question" style="display:none;" title="收起全屏，编写代码" target="_blank" rel="noopener"></a></h2><div class="subject-describe"><div style="margin-bottom:10px;"><div>  小N得到了一个非常神奇的序列A。<a id="more"></a>这个序列长度为N，下标从1开始。A的一个子区间对应一个序列，可以由数对[l,r]表示，代表A[l], A[l + 1], ..., A[r]这段数。对于一个序列B[1], B[2], ..., B[k]，定义B的中位数如下： </div> <div>  1. 先对B排序。得到新的序列C。 </div> <div>  2. 假如k是奇数，那么中位数为<img src="https://uploadfiles.nowcoder.com/files/20180827/306603_1535370498644_equation?tex=C%5B%5Cfrac%7Bk%2B1%7D%7B2%7D%5D">。假如k为偶数，中位数为<img src="https://uploadfiles.nowcoder.com/files/20180827/306603_1535370528061_equation?tex=C%5B%5Cfrac%7Bk%7D%7B2%7D%5D">。 </div> <div>  对于A的所有的子区间，小N可以知道它们对应的中位数。现在小N想知道，所有长度&gt;=Len的子区间中，中位数最大可以是多少。 </div></div><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输入描述:</h2><pre>第一行输入两个数N,Len。<br>第二行输入序列A，第i个数代表A[i]。</pre><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输出描述:</h2><pre>一行一个整数，代表所有长度&gt;=Len的子区间中，最大的中位数。</pre><!-- <br/><h5 style="font-size:14px;font-weight:bold;">输入例子:</h5><pre>11 34864 8684 9511 8557 1122 1234 953 9819 101 1137 1759 </pre><br/><h5 style="font-size:14px;font-weight:bold;">输出例子:</h5><pre>8684</pre> --><div class="question-oi"><div class="question-oi-hd">示例1</div><div class="question-oi-bd"><div class="question-oi-mod"><h2>输入</h2><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="11 34864 8684 9511 8557 1122 1234 953 9819 101 1137 1759 " target="_blank" rel="noopener">复制</a><div class="question-oi-cont"><pre>11 34864 8684 9511 8557 1122 1234 953 9819 101 1137 1759 </pre></div></div><div class="question-oi-mod"><h2>输出</h2><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="8684" target="_blank" rel="noopener">复制</a><div class="question-oi-cont"><pre>8684</pre></div></div></div></div><h2 style="font-size:14px;font-weight:bold;color:#34495e;">备注:</h2><pre>数据范围：<br>30%: n &lt;= 200<br>60%: n &lt;= 2000<br>另外有20%：不超过50个不同的数<br>100%：1&lt;=Len&lt;=n&lt;=10^5, 1 &lt;= a[i] &lt;= 10^9</pre></div><hr><p>考试的时候想到了一个错误的做法，只考虑len==Len的情况，然后找中位数最大值</p><p>主要是得出了错误的结论：一个较大数据在一个较大区间内的位置不会比在一个较小区间里的位置更居中。</p><p>但是这个结论我不会证伪</p><p>然后就这样，然后主席树求区间k/2或(k+1)/2小值，50分</p><p>那么下面来说一下正解</p><hr><p>让中位数最大，可以二分答案</p><p>那么怎么验证答案是否可行？</p><p>比如说我们二分到的为x，那么我们就让序列中&gt;=x的数=1，＜x的数=-1</p><p>这样对于一段序列，</p><p>当且仅当当前序列的和大于0时，这段序列的中位数才大于等于x</p><p>其实这个就可以成为一个区间长度&gt;=len的最大子段和</p><p>然后复杂度就是O(n log max{a_i})</p><p>显然可以过</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mn,ans,n,a[MAXN],b[MAXN],len;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mn=<span class="number">2147483647</span>;</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=x)</span><br><span class="line">         b[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">         b[i]=<span class="number">-1</span>;</span><br><span class="line">        b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=len)</span><br><span class="line">        &#123;</span><br><span class="line">            mn=min(mn,b[i-len]);</span><br><span class="line">            <span class="keyword">if</span>(b[i]-mn&gt;<span class="number">0</span>)</span><br><span class="line">             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid,l=<span class="number">2147483647</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;len);</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        l=min(l,a[i]);r=max(r,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=((l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(judge(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">            ans=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">         r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>B</h2><h2>C</h2><h2>总结</h2><p>A题提供了一个以前没见过的中位数思路，最大子段和。。。</p>]]></content>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIp pj模拟赛1</title>
      <link href="/2018/09/09/NOIp%E6%99%AE%E5%8F%8A%E6%A8%A1%E6%8B%9F%E8%B5%9B1/"/>
      <url>/2018/09/09/NOIp%E6%99%AE%E5%8F%8A%E6%A8%A1%E6%8B%9F%E8%B5%9B1/</url>
      <content type="html"><![CDATA[<h2>A</h2><div style="margin-bottom:10px;"><div>  小A刚考完大学考试。现在已经出了n门课的成绩，他想自己先算一下这些课的绩点是多少。设第i门课的他拿到的绩点是gpa<sub>i</sub>,而这门课的学分是sc<sub>i</sub>，那么他的总绩点用下面的公式计算： </div> <div>  <img src="https://uploadfiles.nowcoder.com/files/20180902/306603_1535894110324_equation?tex=%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5En%20gpa_i%5Ctimes%20sc_i%7D%7B%5Csum_%7Bi%3D1%7D%5En%20sc_i%7D">,<br> </div> <div>  换言之，设S为<span>sc</span><sub>i</sub>的和，T为gpa<sub>i</sub>与sc<sub>i</sub>的乘积的和。那么小A的绩点就是T除以S的值。 </div></div><a id="more"></a><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输入描述:</h2><pre><div>第一行一个整数n。</div><div>接下来n行，每行两个数gpa<sub>i</sub>和sc<sub>i。</sub></div></pre><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输出描述:</h2><pre>输出一行一个实数，表示小A的绩点。输出四舍五入保留1位小数。</pre><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n,m,t,mx,my,q;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sx,sy;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">while</span>(c!=<span class="string">' '</span>&amp;&amp;c!=<span class="string">'\n'</span>&amp;&amp;c!=<span class="string">'\r'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'U'</span>)</span><br><span class="line">            mx+=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'L'</span>)</span><br><span class="line">            my+=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'R'</span>)</span><br><span class="line">            my+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mx+=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    mx=((mx%n)*(t%n))%n;</span><br><span class="line">    my=((my%m)*(t%m))%m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line">    For(i,<span class="number">1</span>,q)</span><br><span class="line">    &#123;</span><br><span class="line">        sx=read();sy=read();</span><br><span class="line">        sx=(sx+mx)%n;</span><br><span class="line">        sy=(sy+my)%m;</span><br><span class="line">        <span class="keyword">if</span>(sx&lt;=<span class="number">0</span>)sx+=n;</span><br><span class="line">        <span class="keyword">if</span>(sy&lt;=<span class="number">0</span>)sy+=m;</span><br><span class="line">        <span class="comment">//if(!sx)sx=n;</span></span><br><span class="line">        <span class="comment">//if(!sy)sy=m;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,sx,sy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>B</h2><div style="margin-bottom:10px;"><div>  小A站在一个巨大的棋盘上。这个棋盘可以看成是一个网格图。这个网格图的大小为n*m。左上角坐标为(1,1)，右下角坐标为(n,m)。这个棋盘很特别，他每行每列都是一个环。具体来说，当小A站在第一行，他往上走的时候，他会走到第n行，站在第n行往下走会走到第一行。对于第一列和第m列类似。小A在棋盘上可以上下左右走，假设他站在位置(i,j)，向上走，会走到(i-1,j)，向下回到(i+1,j)，向左到(i,j-1)，向右到(i,j+1)。注意由于棋盘是循环的，他不会走出这个棋盘。 </div> <div>  现在小A有一个固定的行走序列S，代表他每一步走的方向，U代表向上，D代表向下，L代表向左，R代表向右。比如小A一开始在(1,1)，棋盘大小为3*4。行走序列为UULRD。那么他会依次经过(3,1),(2,1),(2,4),(2,1),(3,1)。但小A觉得只走一遍S太无聊，因此他会重复走这个序列T次。比如上面的例子，当T=2时，真正的行走序列为UULRDUULRD。 </div> <div>  小A有q个备选的起点位置。他一开始先给定你棋盘大小与行走序列，对于每个起点位置，他想知道，他沿着序列走，最终会走到哪个位置停下。 </div></div><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输入描述:</h2><pre>第一行三个整数n,m,T。<br>接下来一行一个字符串S，代表行走序列。注意行走序列在真实走的时候要重复T次。<br>接下来一个整数q。<br>接下来q行，每行两个整数x,y，代表小A的一个备选起点。</pre><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输出描述:</h2><pre>输出q行，每行两个整数，输出对于这个起点，最后的终点是哪里。</pre><div class="question-oi"><div class="question-oi-hd">示例1</div><div class="question-oi-bd"><div class="question-oi-mod"><h2>输入</h2><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="3 6 4DUUUDLLLLR33 22 51 4" target="_blank" rel="noopener">复制</a><div class="question-oi-cont"><pre>3 6 4DUUUDLLLLR33 22 51 4</pre></div></div><div class="question-oi-mod"><h2>输出</h2><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="2 21 53 4" target="_blank" rel="noopener">复制</a><div class="question-oi-cont"><pre>2 21 53 4</pre></div></div></div></div><h2 style="font-size:14px;font-weight:bold;color:#34495e;">备注:</h2><pre>20%: |S| * T &lt;= 10^6, q = 1<br>40%: |S| * T &lt;= 10^6, q &lt;= 10^5<br>60%: |S|, T &lt;= 10^5, q &lt;= 10^5<br>100%: 1 &lt;= T,n,m &lt;= 10^9, 1 &lt;= x &lt;= n, 1 &lt;= y &lt;= m. 1&lt;= q, |S| &lt;= 10^5<br>其中|S|代表S的长度。</pre>---<p>逐个字符读入，然后把所有操作加起来<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;%&#039; at position 4: *t %̲n">*t %n</span>和<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;%&#039; at position 4: *t %̲m">*t %m</span></p><p>然后再对每个坐标加上操作%n %m</p><p>然后特判一下非正数处理即可</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>q</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(|S|+q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord">∣</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">1</span>;c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">    &#123;</span><br><span class="line">        a*=<span class="number">10</span>;a+=(c-<span class="string">'0'</span>);c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n,m,t,mx,my,q;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sx,sy;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">    <span class="keyword">while</span>(c!=<span class="string">' '</span>&amp;&amp;c!=<span class="string">'\n'</span>&amp;&amp;c!=<span class="string">'\r'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'U'</span>)</span><br><span class="line">            mx+=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'L'</span>)</span><br><span class="line">            my+=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'R'</span>)</span><br><span class="line">            my+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mx+=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    mx=((mx%n)*(t%n))%n;</span><br><span class="line">    my=((my%m)*(t%m))%m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line">    For(i,<span class="number">1</span>,q)</span><br><span class="line">    &#123;</span><br><span class="line">        sx=read();sy=read();</span><br><span class="line">        sx=(sx+mx)%n;</span><br><span class="line">        sy=(sy+my)%m;</span><br><span class="line">        <span class="keyword">if</span>(sx&lt;=<span class="number">0</span>)sx+=n;</span><br><span class="line">        <span class="keyword">if</span>(sy&lt;=<span class="number">0</span>)sy+=m;</span><br><span class="line">        <span class="comment">//if(!sx)sx=n;</span></span><br><span class="line">        <span class="comment">//if(!sy)sy=m;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,sx,sy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>C</h2><div class="subject-describe"><div style="margin-bottom:10px;"><div>  小A有一个只包含左右括号的字符串S。但他觉得这个字符串不够美观，因为它不是一个合法的括号串。一个合法的括号串是这样定义的： </div> <div>  1. ()是合法的括号串 </div> <div>  2. 若A是合法的括号串，则(A)则是合法的括号串 </div> <div>  3. 若A，B是合法的括号串，则AB也是合法的括号串。 </div> <div>  <br> </div> <div>  小A现在希望删掉S中若干个字符，使得剩下的字符串是一个合法的括号串。小A想知道有多少不同的方案。两个方案是不同的，当且仅当他们删除的位置不同。比如当S是(()时，有两种方案。分别是删掉第一个位置，或是删掉第二个位置。 </div></div><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输入描述:</h2><pre>第一行一个整数n，代表S的长度。<br>第二行输入n个字符，字符要么是(，要么是)。代表串S。</pre><h2 style="font-size:14px;font-weight:bold;color:#34495e;">输出描述:</h2><pre>一行一个整数，代表不同的方案数。答案对10^9+7取模。</pre><!-- <br/><h5 style="font-size:14px;font-weight:bold;">输入例子:</h5><pre>8)(()(())</pre><br/><h5 style="font-size:14px;font-weight:bold;">输出例子:</h5><pre>30</pre> --><div class="question-oi"><div class="question-oi-hd">示例1</div><div class="question-oi-bd"><div class="question-oi-mod"><h2>输入</h2><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="8)(()(())" target="_blank" rel="noopener">复制</a><div class="question-oi-cont"><pre>8)(()(())</pre></div></div><div class="question-oi-mod"><h2>输出</h2><a class="code-copy-btn js-clipboard" href="javascript:void(0);" data-clipboard-text="30" target="_blank" rel="noopener">复制</a><div class="question-oi-cont"><pre>30</pre></div></div></div></div>---<p>看得出来是dp题推不出式子。。。前两个题做半小时这个题做三小时都没做出来。。。最后连暴力都没打上。。。</p><p>我们首先考虑爆搜，枚举每一位上括号是否被删去，然后对于每一次搜索到的结果judge一下，具体就是用栈来搞，这样的时间复杂度显然是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>∗</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(2^n * n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">n</span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span>的，显然过不了</p><p>那我们再来看之后用栈验证的过程，可以注意到和当前剩下的未匹配的左括号数有密切关系（爆搜验证的时候就是如果是左括号就++a，如果是右括号就–a，如果最后是0那就说明合法），那我们状态中就可以有一个量来描述这个东西</p><p>我们用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span></span></span></span>来表示考虑第i位有j个未匹配的左括号的方案数，那么</p><p>如果s[i]是左括号，那么f[i]<!--???-->[j+1]=sigma f[0~i-1]<!--???-->[j]</p><p>如果是右括号，那么f[i]<!--???-->[j-1]=sigma f[0~i-1]<!--???-->[j]</p><p>最后的答案是(sigma f[1~i]<!--???-->[j-1] ) -1，不太清楚为什么要-1 。。。</p><p>然后显然就可以用前缀和来优化，前缀和优化之后就只用得到当前i的前一项，可以用一个滚动数组交替滚动</p><p>先给出不加滚动数组的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f[<span class="number">10010</span>][<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">        a[i]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        For(j,<span class="number">0</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(a[i]==<span class="string">'('</span>&amp;&amp;j)f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][j<span class="number">-1</span>])%p;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==<span class="string">')'</span>&amp;&amp;j&lt;n)f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][j+<span class="number">1</span>])%p;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;f[i][j]&lt;&lt;'\n';</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(f[n][<span class="number">0</span>]<span class="number">-1</span>+p)%p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>稍微改动一下即为AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f[<span class="number">2</span>][<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> w=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">For(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">a[i]=c;</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">For(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">For(j,<span class="number">0</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">f[w^<span class="number">1</span>][j]=f[w][j];</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'('</span>&amp;&amp;j)f[w^<span class="number">1</span>][j]=(f[w^<span class="number">1</span>][j]+f[w][j<span class="number">-1</span>])%p;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">')'</span>&amp;&amp;j&lt;n)f[w^<span class="number">1</span>][j]=(f[w^<span class="number">1</span>][j]+f[w][j+<span class="number">1</span>])%p;</span><br><span class="line">&#125;</span><br><span class="line">w^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(f[w][<span class="number">0</span>]<span class="number">-1</span>+p)%p;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>主席树入门：静态主席树</title>
      <link href="/2018/08/30/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8%EF%BC%9A%E9%9D%99%E6%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
      <url>/2018/08/30/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8%EF%BC%9A%E9%9D%99%E6%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
      <content type="html"><![CDATA[<h2>问题</h2><p>首先用一个问题来引入：</p><p>给出n个数，m次查询，每次查询一个区间[l,r]中第k大的值</p><a id="more"></a><h2>sol</h2><p>显然可以有一个O(nm)的暴力</p><p>那么我们考虑用线段树来做这道题</p><p>用裸的权值线段树可以支持询问数列中的第k大值，我们询问[l,r]中第k大的值，其实可以调用插入第l个数之前的权值线段树和插入第r个数之后的权值线段树，用它们的权值做差，其实就是一颗[l,r]的权值线段树</p><p>很容易想到可以构建n颗权值线段树，不过空间肯定会炸</p><p>那么我们考虑只更新那些有插入的点，没有更新到的点直接用上个版本的点来代替，这样每次插入一个数的新增空间是log n</p><p>这里就不能用之前普通的线段树那种左儿子(x&lt;&lt;1)右儿子((x&lt;&lt;1)|1)的方式来存储了</p><p>当然，一般还要把这些数离散化一下，如果数的范围小也可以不用离散化</p><p>我们就预先开好一个内存池一样的东西，新开点时直接从这里取就好了，new好像比较慢</p><p><a href="https://www.luogu.org/problemnew/show/P3834" target="_blank" rel="noopener">模板题</a>&gt;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN (200010)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> c;</span><br><span class="line">     <span class="keyword">bool</span> t=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>((c=getchar())==<span class="string">' '</span>||c==<span class="string">'\n'</span>||c==<span class="string">'\r'</span>);</span><br><span class="line">     <span class="keyword">if</span>(c==<span class="string">'-'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        t=<span class="number">1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">     &#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=(c-<span class="string">'0'</span>);</span><br><span class="line">        c=getchar();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> a*(t?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ls[MAXN&lt;&lt;<span class="number">5</span>],rs[MAXN&lt;&lt;<span class="number">5</span>],sum[MAXN&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> root[MAXN],cnt;<span class="comment">//第i个版本的根节点，节点数</span></span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXN],hash[MAXN],len,ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHash</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span><span class="comment">//离散化检索</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(hash+<span class="number">1</span>,hash+len+<span class="number">1</span>,x)-hash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">    ls[x]=++cnt;</span><br><span class="line">    build(l,mid,cnt);</span><br><span class="line">    rs[x]=++cnt;</span><br><span class="line">    build(mid+<span class="number">1</span>,r,cnt);</span><br><span class="line">    <span class="comment">//printf("[l:%d r:%d x:%d ls:%d rs:%d]\n",l,r,x,ls[x],rs[x]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> his)</span><span class="comment">//要修改的值 左端 右端 要修改的点 要修改的点的前一个版本 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;sum[x]=sum[his]+<span class="number">1</span>;<span class="keyword">return</span>;&#125;<span class="comment">//AAAA</span></span><br><span class="line">    ls[x]=ls[his];rs[x]=rs[his];sum[x]=sum[his]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(w&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        ls[x]=++cnt;</span><br><span class="line">        update(w,l,mid,cnt,ls[his]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rs[x]=++cnt;</span><br><span class="line">        update(w,mid+<span class="number">1</span>,r,cnt,rs[his]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sum[x]=sum[ls[x]]+sum[rs[x]];</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rx,<span class="keyword">int</span> lx,<span class="keyword">int</span> k)</span><span class="comment">//当前点左 当前点右 当前右点 当前左点 第k小 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=hash[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=sum[ls[rx]]-sum[ls[lx]])<span class="comment">//在左边 </span></span><br><span class="line">     ask(l,mid,ls[rx],ls[lx],k);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//在右边 </span></span><br><span class="line">     ask(mid+<span class="number">1</span>,r,rs[rx],rs[lx],k-sum[ls[rx]]+sum[ls[lx]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx,ty,tk;</span><br><span class="line">    n=read();m=read();</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">     a[i]=read();</span><br><span class="line">    <span class="built_in">memcpy</span>(hash,a,<span class="keyword">sizeof</span> a);</span><br><span class="line">    sort(hash+<span class="number">1</span>,hash+n+<span class="number">1</span>);</span><br><span class="line">    len=unique(hash+<span class="number">1</span>,hash+n+<span class="number">1</span>)-hash<span class="number">-1</span>;</span><br><span class="line">    root[<span class="number">0</span>]=++cnt;</span><br><span class="line">    build(<span class="number">1</span>,len,cnt);</span><br><span class="line">    For(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        root[i]=++cnt;</span><br><span class="line">        update(getHash(a[i]),<span class="number">1</span>,len,cnt,root[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    For(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        tx=read();ty=read();tk=read();</span><br><span class="line">        <span class="keyword">if</span>(tx==ty)</span><br><span class="line">        &#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[tx]);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        ask(<span class="number">1</span>,len,root[ty],root[tx<span class="number">-1</span>],tk);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客迁移</title>
      <link href="/2018/08/30/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2018/08/30/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<p>其他博客地址：</p><p>csdn：<a href="https://blog.csdn.net/suxuyu01" target="_blank" rel="noopener">https://blog.csdn.net/suxuyu01</a></p><p>Luogu：<a href="https://www.luogu.org/blog/lqyzsun/" target="_blank" rel="noopener">https://www.luogu.org/blog/lqyzsun/</a></p><p>一般情况下不会再使用，如果在除此博客之外的地方发了我认为有价值的新文章也搬到这里来</p>]]></content>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
